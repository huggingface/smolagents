<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="93" skipped="62" tests="830" time="133.270" timestamp="2025-07-18T18:46:07.303625+02:00" hostname="llarch"><testcase classname="tests.test_agents.TestAgent" name="test_fake_toolcalling_agent" time="0.057"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerToo...t at 0x7feb06d1fa40&gt;, 'python_interpreter': &lt;smolagents.default_tools.PythonInterpreterTool object at 0x7feb06d658b0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247c31a0&gt;

    def test_fake_toolcalling_agent(self):
&gt;       agent = ToolCallingAgent(tools=[PythonInterpreterTool()], model=FakeToolCallModel())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:427: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerToo...t at 0x7feb06d1fa40&gt;, 'python_interpreter': &lt;smolagents.default_tools.PythonInterpreterTool object at 0x7feb06d658b0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_toolcalling_agent_handles_image_tool_outputs" time="0.057"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'fake_image_generation_tool': &lt;smolagents.tools.tool.&lt;lo...leTool object at 0x7fe9c61db260&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9c61db2f0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247c3320&gt;, shared_datadir = PosixPath('/tmp/pytest-of-ecca/pytest-6/test_toolcalling_agent_handles0/data')

    def test_toolcalling_agent_handles_image_tool_outputs(self, shared_datadir):
        import PIL.Image
    
        @tool
        def fake_image_generation_tool(prompt: str) -&gt; PIL.Image.Image:
            """Tool that generates an image.
    
            Args:
                prompt: The prompt
            """
    
            import PIL.Image
    
            return PIL.Image.open(shared_datadir / "000000039769.png")
    
&gt;       agent = ToolCallingAgent(
            tools=[fake_image_generation_tool], model=FakeToolCallModelImage(), verbosity_level=10
        )

tests/test_agents.py:453: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'fake_image_generation_tool': &lt;smolagents.tools.tool.&lt;lo...leTool object at 0x7fe9c61db260&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9c61db2f0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_toolcalling_agent_handles_image_inputs" time="0.071"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'fake_image_understanding_tool': &lt;smolagents.tools.tool....leTool object at 0x7feb2c43aa80&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c43bb00&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247c34d0&gt;, shared_datadir = PosixPath('/tmp/pytest-of-ecca/pytest-6/test_toolcalling_agent_handles1/data')

    def test_toolcalling_agent_handles_image_inputs(self, shared_datadir):
        import PIL.Image
    
        image = PIL.Image.open(shared_datadir / "000000039769.png")  # dummy input
    
        @tool
        def fake_image_understanding_tool(prompt: str, image: PIL.Image.Image) -&gt; str:
            """Tool that creates a caption for an image.
    
            Args:
                prompt: The prompt
                image: The image
            """
            return "The image is a cat."
    
&gt;       agent = ToolCallingAgent(tools=[fake_image_understanding_tool], model=FakeToolCallModelVL())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:475: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'fake_image_understanding_tool': &lt;smolagents.tools.tool....leTool object at 0x7feb2c43aa80&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c43bb00&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_fake_code_agent" time="0.064"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247c3590&gt;

    def test_fake_code_agent(self):
&gt;       agent = CodeAgent(tools=[PythonInterpreterTool()], model=FakeCodeModel(), verbosity_level=10)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:480: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_additional_args_added_to_task" time="0.063"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247c3170&gt;

    def test_additional_args_added_to_task(self):
&gt;       agent = CodeAgent(tools=[], model=FakeCodeModel())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:490: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_agent_communication" time="0.106"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestAgent object at 0x7feb247c3710&gt;

    def test_agent_communication(self):
        with Manager() as manager:
            queue_dict = manager.dict()
            queue_dict[0] = manager.Queue()
            queue_dict[1] = manager.Queue()
            model = InferenceClientModel(model_id="mock-model")  # Use a mock model
&gt;           agent0 = CodeAgent(
                tools=[SendMessageTool(queue_dict, 0)],
                model=model,
                agent_id=0,
                queue_dict=queue_dict,
            )

tests/test_agents.py:503: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1688: in __init__
    queue_dict.setdefault(self.agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2c801a00', 'setdefault', (2, &lt;queue.Queue object at 0x7feb2c4acad0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_reset_conversations" time="0.067"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247c3860&gt;

    def test_reset_conversations(self):
&gt;       agent = CodeAgent(tools=[PythonInterpreterTool()], model=FakeCodeModel())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_setup_agent_with_empty_toolbox" time="0.058"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c99da30&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247c39b0&gt;

    def test_setup_agent_with_empty_toolbox(self):
&gt;       ToolCallingAgent(model=FakeToolCallModel(), tools=[])

tests/test_agents.py:539: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c99da30&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_fails_max_steps" time="0.065"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247c3b00&gt;

    def test_fails_max_steps(self):
&gt;       agent = CodeAgent(
            tools=[PythonInterpreterTool()],
            model=FakeCodeModelNoReturn(),  # use this callable because it never ends
            max_steps=5,
        )

tests/test_agents.py:542: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_fails_max_runtime" time="0.055"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247c3d10&gt;

    def test_fails_max_runtime(self):
&gt;       agent = CodeAgent(
            tools=[PythonInterpreterTool()],
            model=FakeCodeModelNoReturn(),
            max_steps=50,
            max_runtime=1,
        )

tests/test_agents.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_tool_descriptions_get_baked_in_system_prompt" time="0.071"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247c3ec0&gt;

    def test_tool_descriptions_get_baked_in_system_prompt(self):
        tool = PythonInterpreterTool()
        tool.name = "fake_tool_name"
        tool.description = "fake_tool_description"
&gt;       agent = CodeAgent(tools=[tool], model=FakeCodeModel())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_module_imports_get_baked_in_system_prompt" time="0.065"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e80b0&gt;

    def test_module_imports_get_baked_in_system_prompt(self):
&gt;       agent = CodeAgent(tools=[], model=FakeCodeModel())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:584: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_init_agent_with_different_toolsets" time="0.054"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e8260&gt;

    def test_init_agent_with_different_toolsets(self):
        toolset_1 = []
&gt;       agent = CodeAgent(tools=toolset_1, model=FakeCodeModel())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:591: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_function_persistence_across_steps" time="0.063"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'numpy', 'queue', 'random', 're', 'stat', 'st...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e8410&gt;

    def test_function_persistence_across_steps(self):
&gt;       agent = CodeAgent(
            tools=[],
            model=FakeCodeModelFunctionDef(),
            max_steps=2,
            additional_authorized_imports=["numpy"],
            verbosity_level=100,
        )

tests/test_agents.py:614: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'numpy', 'queue', 'random', 're', 'stat', 'st...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_init_managed_agent" time="0.063"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e85c0&gt;

    def test_init_managed_agent(self):
&gt;       agent = CodeAgent(tools=[], model=FakeCodeModelFunctionDef(), name="managed_agent", description="Empty")
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:625: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_agent_description_gets_correctly_inserted_in_system_prompt" time="0.059"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e8770&gt;

    def test_agent_description_gets_correctly_inserted_in_system_prompt(self):
&gt;       managed_agent = CodeAgent(
            tools=[], model=FakeCodeModelFunctionDef(), name="managed_agent", description="Empty"
        )

tests/test_agents.py:630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_replay_shows_logs" time="0.066"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'numpy', 'queue', 'random', 're', 'stat', 'st...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e8920&gt;, agent_logger = &lt;smolagents.monitoring.AgentLogger object at 0x7feb2c9bdeb0&gt;

    def test_replay_shows_logs(self, agent_logger):
&gt;       agent = CodeAgent(
            tools=[],
            model=FakeCodeModelImport(),
            verbosity_level=0,
            additional_authorized_imports=["numpy"],
            logger=agent_logger,
        )

tests/test_agents.py:643: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'numpy', 'queue', 'random', 're', 'stat', 'st...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_code_nontrivial_final_answer_works" time="0.065"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e8ad0&gt;

        def test_code_nontrivial_final_answer_works(self):
            class FakeCodeModelFinalAnswer(Model):
                def generate(self, messages, stop_sequences=None):
                    return ChatMessage(
                        role=MessageRole.ASSISTANT,
                        content="""&lt;code&gt;
    def nested_answer():
        final_answer("Correct!")
    
    nested_answer()
    &lt;/code&gt;""",
                    )
    
&gt;           agent = CodeAgent(tools=[], model=FakeCodeModelFinalAnswer())
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:681: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_transformers_toolcalling_agent" time="2.866"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c5fa690&gt;, 'weather_api': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7feb2c99e990&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e8c80&gt;

    def test_transformers_toolcalling_agent(self):
        @tool
        def weather_api(location: str, celsius: str = "") -&gt; str:
            """
            Gets the weather in the next days at given location.
            Secretly this tool does not care about the location, it hates the weather everywhere.
    
            Args:
                location: the location
                celsius: the temperature type
            """
            return "The weather is UNGODLY with torrential rains and temperatures below -10°C"
    
        model = TransformersModel(
            model_id="HuggingFaceTB/SmolLM2-360M-Instruct",
            max_new_tokens=100,
            device_map="auto",
            do_sample=False,
        )
&gt;       agent = ToolCallingAgent(model=model, tools=[weather_api], max_steps=1, verbosity_level=10)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:705: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c5fa690&gt;, 'weather_api': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7feb2c99e990&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_final_answer_checks" time="0.071"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e8e30&gt;

    def test_final_answer_checks(self):
        error_string = "failed with error"
    
        def check_always_fails(final_answer, agent_memory):
            assert False, "Error raised in check"
    
&gt;       agent = CodeAgent(model=FakeCodeModel(), tools=[], final_answer_checks=[check_always_fails])
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:723: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_generation_errors_are_raised" time="0.064"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e8fe0&gt;

    def test_generation_errors_are_raised(self):
        class FakeCodeModel(Model):
            def generate(self, messages, stop_sequences=None):
                assert False, "Generation failed"
    
&gt;       agent = CodeAgent(model=FakeCodeModel(), tools=[])
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestAgent" name="test_planning_step_with_injected_memory" time="0.073"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestAgent object at 0x7feb247e9190&gt;

    def test_planning_step_with_injected_memory(self):
        """Test that agent properly uses update plan prompts when memory is injected before a run.
    
        This test verifies:
        1. Planning steps are created with the correct frequency
        2. Injected memory is included in planning context
        3. Messages are properly formatted with expected roles and content
        """
        planning_interval = 1
        max_steps = 4
        task = "Continuous task"
        previous_task = "Previous user request"
    
        # Create agent with planning capability
&gt;       agent = CodeAgent(
            tools=[],
            planning_interval=planning_interval,
            model=FakeCodeModelPlanning(),
            max_steps=max_steps,
        )

tests/test_agents.py:764: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_instantiation_disables_logging_to_terminal" time="0.053"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e93a0&gt;

    def test_instantiation_disables_logging_to_terminal(self):
        fake_model = MagicMock()
&gt;       agent = DummyMultiStepAgent(tools=[], model=fake_model)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:858: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2c329d80', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c9ed9a0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_instantiation_with_prompt_templates" time="0.047"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247c3d40&gt;
prompt_templates = {'final_answer': {'post_messages': 'custom', 'pre_messages': 'custom'}, 'managed_agent': {'report': 'Report for {{name...plan_post_messages': 'custom', 'update_plan_pre_messages': 'custom'}, 'system_prompt': 'This is a test system prompt.'}

    def test_instantiation_with_prompt_templates(self, prompt_templates):
&gt;       agent = DummyMultiStepAgent(tools=[], model=MagicMock(), prompt_templates=prompt_templates)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:862: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2bdbb2c0', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c9d1040&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_instantiation_with_final_answer_tool[tools0-FinalAnswerTool]" time="0.045"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247c3650&gt;, tools = [], expected_final_answer_tool = &lt;class 'smolagents.default_tools.FinalAnswerTool'&gt;

    @pytest.mark.parametrize(
        "tools, expected_final_answer_tool",
        [([], FinalAnswerTool), ([CustomFinalAnswerTool()], CustomFinalAnswerTool)],
    )
    def test_instantiation_with_final_answer_tool(self, tools, expected_final_answer_tool):
&gt;       agent = DummyMultiStepAgent(tools=tools, model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:874: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2bcef000', 'setdefault', (0, &lt;queue.Queue object at 0x7fea038756a0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_instantiation_with_final_answer_tool[tools1-CustomFinalAnswerTool]" time="0.044"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e95b0&gt;, tools = [&lt;tests.test_agents.CustomFinalAnswerTool object at 0x7feb2479ca40&gt;]
expected_final_answer_tool = &lt;class 'tests.test_agents.CustomFinalAnswerTool'&gt;

    @pytest.mark.parametrize(
        "tools, expected_final_answer_tool",
        [([], FinalAnswerTool), ([CustomFinalAnswerTool()], CustomFinalAnswerTool)],
    )
    def test_instantiation_with_final_answer_tool(self, tools, expected_final_answer_tool):
&gt;       agent = DummyMultiStepAgent(tools=tools, model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:874: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7fe9fd3caf40', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c47cbf0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_instantiation_with_deprecated_grammar" time="0.051"><failure message="Failed: DID NOT WARN. No warnings of type (&lt;class 'FutureWarning'&gt;,) were emitted.&#10; Emitted warnings: [].">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e8f50&gt;

    def test_instantiation_with_deprecated_grammar(self):
        class SimpleAgent(MultiStepAgent):
            def initialize_system_prompt(self) -&gt; str:
                return "Test system prompt"
    
        # Test with a non-None grammar parameter
        with pytest.warns(
            FutureWarning, match="Parameter 'grammar' is deprecated and will be removed in version 1.20."
        ):
&gt;           SimpleAgent(tools=[], model=MagicMock(), grammar={"format": "json"}, verbosity_level=LogLevel.DEBUG)

tests/test_agents.py:887: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2ba2f400', 'setdefault', (0, &lt;queue.Queue object at 0x7fea038754c0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e8f50&gt;

    def test_instantiation_with_deprecated_grammar(self):
        class SimpleAgent(MultiStepAgent):
            def initialize_system_prompt(self) -&gt; str:
                return "Test system prompt"
    
        # Test with a non-None grammar parameter
&gt;       with pytest.warns(
            FutureWarning, match="Parameter 'grammar' is deprecated and will be removed in version 1.20."
        ):
E       Failed: DID NOT WARN. No warnings of type (&lt;class 'FutureWarning'&gt;,) were emitted.
E        Emitted warnings: [].

tests/test_agents.py:884: Failed</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_system_prompt_property" time="0.045"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e8a40&gt;

    def test_system_prompt_property(self):
        """Test that system_prompt property is read-only and calls initialize_system_prompt."""
    
        class SimpleAgent(MultiStepAgent):
            def initialize_system_prompt(self) -&gt; str:
                return "Test system prompt"
    
            def step(self, memory_step: ActionStep) -&gt; Generator[None]:
                yield None
    
        # Create a simple agent with mocked model
        model = MagicMock()
&gt;       agent = SimpleAgent(tools=[], model=model)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:906: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2bcb0bc0', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c88b0b0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_setup_step_callbacks[None-expected_registry_state0]" time="0.040"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e8290&gt;, step_callbacks = None
expected_registry_state = {'ActionStep': 1, 'FinalAnswerStep': 0, 'MemoryStep': 0, 'PlanningStep': 0, ...}

    @pytest.mark.parametrize(
        "step_callbacks, expected_registry_state",
        [
            # Case 0: None as input (initializes empty registry)
            (
                None,
                {
                    "MemoryStep": 0,
                    "ActionStep": 1,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },  # Only monitor.update_metrics is registered for ActionStep
            ),
            # Case 1: List of callbacks (registers only for ActionStep: backward compatibility)
            (
                [MagicMock(), MagicMock()],
                {
                    "MemoryStep": 0,
                    "ActionStep": 3,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 2: Dict mapping specific step types to callbacks
            (
                {ActionStep: MagicMock(), PlanningStep: MagicMock()},
                {
                    "MemoryStep": 0,
                    "ActionStep": 2,
                    "PlanningStep": 1,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 3: Dict with list of callbacks for a step type
            (
                {ActionStep: [MagicMock(), MagicMock()]},
                {
                    "MemoryStep": 0,
                    "ActionStep": 3,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 4: Dict with mixed single and list callbacks
            (
                {ActionStep: MagicMock(), MemoryStep: [MagicMock(), MagicMock()]},
                {
                    "MemoryStep": 2,
                    "ActionStep": 2,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
        ],
    )
    def test_setup_step_callbacks(self, step_callbacks, expected_registry_state):
        """Test that _setup_step_callbacks correctly sets up the callback registry."""
        # Create a dummy agent
&gt;       agent = DummyMultiStepAgent(tools=[], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:991: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7fe9fd3970c0', 'setdefault', (0, &lt;queue.Queue object at 0x7fe9c61dbe60&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_setup_step_callbacks[step_callbacks1-expected_registry_state1]" time="0.045"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e96a0&gt;, step_callbacks = [&lt;MagicMock id='140647906001312'&gt;, &lt;MagicMock id='140647906011536'&gt;]
expected_registry_state = {'ActionStep': 3, 'FinalAnswerStep': 0, 'MemoryStep': 0, 'PlanningStep': 0, ...}

    @pytest.mark.parametrize(
        "step_callbacks, expected_registry_state",
        [
            # Case 0: None as input (initializes empty registry)
            (
                None,
                {
                    "MemoryStep": 0,
                    "ActionStep": 1,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },  # Only monitor.update_metrics is registered for ActionStep
            ),
            # Case 1: List of callbacks (registers only for ActionStep: backward compatibility)
            (
                [MagicMock(), MagicMock()],
                {
                    "MemoryStep": 0,
                    "ActionStep": 3,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 2: Dict mapping specific step types to callbacks
            (
                {ActionStep: MagicMock(), PlanningStep: MagicMock()},
                {
                    "MemoryStep": 0,
                    "ActionStep": 2,
                    "PlanningStep": 1,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 3: Dict with list of callbacks for a step type
            (
                {ActionStep: [MagicMock(), MagicMock()]},
                {
                    "MemoryStep": 0,
                    "ActionStep": 3,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 4: Dict with mixed single and list callbacks
            (
                {ActionStep: MagicMock(), MemoryStep: [MagicMock(), MagicMock()]},
                {
                    "MemoryStep": 2,
                    "ActionStep": 2,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
        ],
    )
    def test_setup_step_callbacks(self, step_callbacks, expected_registry_state):
        """Test that _setup_step_callbacks correctly sets up the callback registry."""
        # Create a dummy agent
&gt;       agent = DummyMultiStepAgent(tools=[], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:991: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2935ec40', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c9be540&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_setup_step_callbacks[step_callbacks2-expected_registry_state2]" time="0.044"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e9760&gt;
step_callbacks = {&lt;class 'smolagents.memory.ActionStep'&gt;: &lt;MagicMock id='140647906015280'&gt;, &lt;class 'smolagents.memory.PlanningStep'&gt;: &lt;MagicMock id='140647906133728'&gt;}
expected_registry_state = {'ActionStep': 2, 'FinalAnswerStep': 0, 'MemoryStep': 0, 'PlanningStep': 1, ...}

    @pytest.mark.parametrize(
        "step_callbacks, expected_registry_state",
        [
            # Case 0: None as input (initializes empty registry)
            (
                None,
                {
                    "MemoryStep": 0,
                    "ActionStep": 1,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },  # Only monitor.update_metrics is registered for ActionStep
            ),
            # Case 1: List of callbacks (registers only for ActionStep: backward compatibility)
            (
                [MagicMock(), MagicMock()],
                {
                    "MemoryStep": 0,
                    "ActionStep": 3,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 2: Dict mapping specific step types to callbacks
            (
                {ActionStep: MagicMock(), PlanningStep: MagicMock()},
                {
                    "MemoryStep": 0,
                    "ActionStep": 2,
                    "PlanningStep": 1,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 3: Dict with list of callbacks for a step type
            (
                {ActionStep: [MagicMock(), MagicMock()]},
                {
                    "MemoryStep": 0,
                    "ActionStep": 3,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 4: Dict with mixed single and list callbacks
            (
                {ActionStep: MagicMock(), MemoryStep: [MagicMock(), MagicMock()]},
                {
                    "MemoryStep": 2,
                    "ActionStep": 2,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
        ],
    )
    def test_setup_step_callbacks(self, step_callbacks, expected_registry_state):
        """Test that _setup_step_callbacks correctly sets up the callback registry."""
        # Create a dummy agent
&gt;       agent = DummyMultiStepAgent(tools=[], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:991: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7fe9fd40af00', 'setdefault', (0, &lt;queue.Queue object at 0x7fea038778c0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_setup_step_callbacks[step_callbacks3-expected_registry_state3]" time="0.044"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e9820&gt;
step_callbacks = {&lt;class 'smolagents.memory.ActionStep'&gt;: [&lt;MagicMock id='140647906137520'&gt;, &lt;MagicMock id='140647906141312'&gt;]}
expected_registry_state = {'ActionStep': 3, 'FinalAnswerStep': 0, 'MemoryStep': 0, 'PlanningStep': 0, ...}

    @pytest.mark.parametrize(
        "step_callbacks, expected_registry_state",
        [
            # Case 0: None as input (initializes empty registry)
            (
                None,
                {
                    "MemoryStep": 0,
                    "ActionStep": 1,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },  # Only monitor.update_metrics is registered for ActionStep
            ),
            # Case 1: List of callbacks (registers only for ActionStep: backward compatibility)
            (
                [MagicMock(), MagicMock()],
                {
                    "MemoryStep": 0,
                    "ActionStep": 3,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 2: Dict mapping specific step types to callbacks
            (
                {ActionStep: MagicMock(), PlanningStep: MagicMock()},
                {
                    "MemoryStep": 0,
                    "ActionStep": 2,
                    "PlanningStep": 1,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 3: Dict with list of callbacks for a step type
            (
                {ActionStep: [MagicMock(), MagicMock()]},
                {
                    "MemoryStep": 0,
                    "ActionStep": 3,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 4: Dict with mixed single and list callbacks
            (
                {ActionStep: MagicMock(), MemoryStep: [MagicMock(), MagicMock()]},
                {
                    "MemoryStep": 2,
                    "ActionStep": 2,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
        ],
    )
    def test_setup_step_callbacks(self, step_callbacks, expected_registry_state):
        """Test that _setup_step_callbacks correctly sets up the callback registry."""
        # Create a dummy agent
&gt;       agent = DummyMultiStepAgent(tools=[], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:991: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2ba670c0', 'setdefault', (0, &lt;queue.Queue object at 0x7fea038cc0b0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_setup_step_callbacks[step_callbacks4-expected_registry_state4]" time="0.038"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e98e0&gt;
step_callbacks = {&lt;class 'smolagents.memory.ActionStep'&gt;: &lt;MagicMock id='140647906145104'&gt;, &lt;class 'smolagents.memory.MemoryStep'&gt;: [&lt;MagicMock id='140647906148960'&gt;, &lt;MagicMock id='140647906152752'&gt;]}
expected_registry_state = {'ActionStep': 2, 'FinalAnswerStep': 0, 'MemoryStep': 2, 'PlanningStep': 0, ...}

    @pytest.mark.parametrize(
        "step_callbacks, expected_registry_state",
        [
            # Case 0: None as input (initializes empty registry)
            (
                None,
                {
                    "MemoryStep": 0,
                    "ActionStep": 1,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },  # Only monitor.update_metrics is registered for ActionStep
            ),
            # Case 1: List of callbacks (registers only for ActionStep: backward compatibility)
            (
                [MagicMock(), MagicMock()],
                {
                    "MemoryStep": 0,
                    "ActionStep": 3,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 2: Dict mapping specific step types to callbacks
            (
                {ActionStep: MagicMock(), PlanningStep: MagicMock()},
                {
                    "MemoryStep": 0,
                    "ActionStep": 2,
                    "PlanningStep": 1,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 3: Dict with list of callbacks for a step type
            (
                {ActionStep: [MagicMock(), MagicMock()]},
                {
                    "MemoryStep": 0,
                    "ActionStep": 3,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
            # Case 4: Dict with mixed single and list callbacks
            (
                {ActionStep: MagicMock(), MemoryStep: [MagicMock(), MagicMock()]},
                {
                    "MemoryStep": 2,
                    "ActionStep": 2,
                    "PlanningStep": 0,
                    "TaskStep": 0,
                    "SystemPromptStep": 0,
                    "FinalAnswerStep": 0,
                },
            ),
        ],
    )
    def test_setup_step_callbacks(self, step_callbacks, expected_registry_state):
        """Test that _setup_step_callbacks correctly sets up the callback registry."""
        # Create a dummy agent
&gt;       agent = DummyMultiStepAgent(tools=[], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:991: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb29346f40', 'setdefault', (0, &lt;queue.Queue object at 0x7fe9c61dbe60&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_finalize_step_callbacks_with_list" time="0.042"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e9a60&gt;

    def test_finalize_step_callbacks_with_list(self):
        # Create mock callbacks
        callback1 = MagicMock()
        callback2 = MagicMock()
    
        # Create a test agent with a list of callbacks
&gt;       agent = DummyMultiStepAgent(tools=[], model=MagicMock(), step_callbacks=[callback1, callback2])
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1016: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2ba3d640', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c8aa330&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_finalize_step_callbacks_by_type" time="0.044"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e9c10&gt;

    def test_finalize_step_callbacks_by_type(self):
        # Create mock callbacks for different step types
        action_step_callback = MagicMock()
        action_step_callback_2 = MagicMock()
        planning_step_callback = MagicMock()
        step_callback = MagicMock()
    
        # Register callbacks for different step types
        step_callbacks = {
            ActionStep: [action_step_callback, action_step_callback_2],
            PlanningStep: planning_step_callback,
            MemoryStep: step_callback,
        }
&gt;       agent = DummyMultiStepAgent(tools=[], model=MagicMock(), step_callbacks=step_callbacks)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1058: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb293c7fc0', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c820470&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_logs_display_thoughts_even_if_error" time="0.060"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c86b410&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e9dc0&gt;

    def test_logs_display_thoughts_even_if_error(self):
        class FakeJsonModelNoCall(Model):
            def generate(self, messages, stop_sequences=None, tools_to_call_from=None):
                return ChatMessage(
                    role=MessageRole.ASSISTANT,
                    content="""I don't want to call tools today""",
                    tool_calls=None,
                    raw="""I don't want to call tools today""",
                )
    
&gt;       agent_toolcalling = ToolCallingAgent(model=FakeJsonModelNoCall(), tools=[], max_steps=1, verbosity_level=10)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c86b410&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_step_number" time="0.071"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247e9f70&gt;

    def test_step_number(self):
        fake_model = MagicMock()
        fake_model.generate.return_value = ChatMessage(
            role=MessageRole.ASSISTANT,
            content="Model output.",
            tool_calls=None,
            raw="Model output.",
            token_usage=None,
        )
        max_steps = 2
&gt;       agent = CodeAgent(tools=[], model=fake_model, max_steps=max_steps)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_planning_step[1-expected_messages_list0]" time="0.062"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247ea1b0&gt;, step = 1
expected_messages_list = [[ChatMessage(role=&lt;MessageRole.USER: 'user'&gt;, content=[{'type': 'text', 'text': 'INITIAL_PLAN_USER_PROMPT'}], tool_calls=None, raw=None, token_usage=None)]]

    @pytest.mark.parametrize(
        "step, expected_messages_list",
        [
            (
                1,
                [
                    [
                        ChatMessage(
                            role=MessageRole.USER, content=[{"type": "text", "text": "INITIAL_PLAN_USER_PROMPT"}]
                        ),
                    ],
                ],
            ),
            (
                2,
                [
                    [
                        ChatMessage(
                            role=MessageRole.SYSTEM,
                            content=[{"type": "text", "text": "UPDATE_PLAN_SYSTEM_PROMPT"}],
                        ),
                        ChatMessage(
                            role=MessageRole.USER,
                            content=[{"type": "text", "text": "UPDATE_PLAN_USER_PROMPT"}],
                        ),
                    ],
                ],
            ),
        ],
    )
    def test_planning_step(self, step, expected_messages_list):
        fake_model = MagicMock()
&gt;       agent = CodeAgent(
            tools=[],
            model=fake_model,
        )

tests/test_agents.py:1169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_planning_step[2-expected_messages_list1]" time="0.070"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247ea330&gt;, step = 2
expected_messages_list = [[ChatMessage(role=&lt;MessageRole.SYSTEM: 'system'&gt;, content=[{'type': 'text', 'text': 'UPDATE_PLAN_SYSTEM_PROMPT'}], to... 'user'&gt;, content=[{'type': 'text', 'text': 'UPDATE_PLAN_USER_PROMPT'}], tool_calls=None, raw=None, token_usage=None)]]

    @pytest.mark.parametrize(
        "step, expected_messages_list",
        [
            (
                1,
                [
                    [
                        ChatMessage(
                            role=MessageRole.USER, content=[{"type": "text", "text": "INITIAL_PLAN_USER_PROMPT"}]
                        ),
                    ],
                ],
            ),
            (
                2,
                [
                    [
                        ChatMessage(
                            role=MessageRole.SYSTEM,
                            content=[{"type": "text", "text": "UPDATE_PLAN_SYSTEM_PROMPT"}],
                        ),
                        ChatMessage(
                            role=MessageRole.USER,
                            content=[{"type": "text", "text": "UPDATE_PLAN_USER_PROMPT"}],
                        ),
                    ],
                ],
            ),
        ],
    )
    def test_planning_step(self, step, expected_messages_list):
        fake_model = MagicMock()
&gt;       agent = CodeAgent(
            tools=[],
            model=fake_model,
        )

tests/test_agents.py:1169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_provide_final_answer[None-expected_messages_list0]" time="0.091"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247ea540&gt;, images = None
expected_messages_list = [[ChatMessage(role=&lt;MessageRole.SYSTEM: 'system'&gt;, content=[{'type': 'text', 'text': 'FINAL_ANSWER_SYSTEM_PROMPT'}], t...'user'&gt;, content=[{'type': 'text', 'text': 'FINAL_ANSWER_USER_PROMPT'}], tool_calls=None, raw=None, token_usage=None)]]

    @pytest.mark.parametrize(
        "images, expected_messages_list",
        [
            (
                None,
                [
                    [
                        ChatMessage(
                            role=MessageRole.SYSTEM,
                            content=[{"type": "text", "text": "FINAL_ANSWER_SYSTEM_PROMPT"}],
                        ),
                        ChatMessage(
                            role=MessageRole.USER,
                            content=[{"type": "text", "text": "FINAL_ANSWER_USER_PROMPT"}],
                        ),
                    ]
                ],
            ),
            (
                ["image1.png"],
                [
                    [
                        ChatMessage(
                            role=MessageRole.SYSTEM,
                            content=[
                                {"type": "text", "text": "FINAL_ANSWER_SYSTEM_PROMPT"},
                                {"type": "image", "image": "image1.png"},
                            ],
                        ),
                        ChatMessage(
                            role=MessageRole.USER,
                            content=[{"type": "text", "text": "FINAL_ANSWER_USER_PROMPT"}],
                        ),
                    ]
                ],
            ),
        ],
    )
    def test_provide_final_answer(self, images, expected_messages_list):
        fake_model = MagicMock()
        fake_model.generate.return_value = ChatMessage(
            role=MessageRole.ASSISTANT,
            content="Final answer.",
            tool_calls=None,
            raw="Final answer.",
            token_usage=None,
        )
&gt;       agent = CodeAgent(
            tools=[],
            model=fake_model,
        )

tests/test_agents.py:1277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_provide_final_answer[images1-expected_messages_list1]" time="0.082"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247ea6c0&gt;, images = ['image1.png']
expected_messages_list = [[ChatMessage(role=&lt;MessageRole.SYSTEM: 'system'&gt;, content=[{'type': 'text', 'text': 'FINAL_ANSWER_SYSTEM_PROMPT'}, {'...'user'&gt;, content=[{'type': 'text', 'text': 'FINAL_ANSWER_USER_PROMPT'}], tool_calls=None, raw=None, token_usage=None)]]

    @pytest.mark.parametrize(
        "images, expected_messages_list",
        [
            (
                None,
                [
                    [
                        ChatMessage(
                            role=MessageRole.SYSTEM,
                            content=[{"type": "text", "text": "FINAL_ANSWER_SYSTEM_PROMPT"}],
                        ),
                        ChatMessage(
                            role=MessageRole.USER,
                            content=[{"type": "text", "text": "FINAL_ANSWER_USER_PROMPT"}],
                        ),
                    ]
                ],
            ),
            (
                ["image1.png"],
                [
                    [
                        ChatMessage(
                            role=MessageRole.SYSTEM,
                            content=[
                                {"type": "text", "text": "FINAL_ANSWER_SYSTEM_PROMPT"},
                                {"type": "image", "image": "image1.png"},
                            ],
                        ),
                        ChatMessage(
                            role=MessageRole.USER,
                            content=[{"type": "text", "text": "FINAL_ANSWER_USER_PROMPT"}],
                        ),
                    ]
                ],
            ),
        ],
    )
    def test_provide_final_answer(self, images, expected_messages_list):
        fake_model = MagicMock()
        fake_model.generate.return_value = ChatMessage(
            role=MessageRole.ASSISTANT,
            content="Final answer.",
            tool_calls=None,
            raw="Final answer.",
            token_usage=None,
        )
&gt;       agent = CodeAgent(
            tools=[],
            model=fake_model,
        )

tests/test_agents.py:1277: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_interrupt" time="0.105"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247ea840&gt;

    def test_interrupt(self):
        fake_model = MagicMock()
        fake_model.generate.return_value = ChatMessage(
            role=MessageRole.ASSISTANT,
            content="Model output.",
            tool_calls=None,
            raw="Model output.",
            token_usage=None,
        )
    
        def interrupt_callback(memory_step, agent):
            agent.interrupt()
    
        with Manager() as manager:
            queue_dict = manager.dict()
            queue_dict[0] = manager.Queue()
&gt;           agent = CodeAgent(
                tools=[],
                model=fake_model,
                step_callbacks=[interrupt_callback],
                agent_id=0,
                queue_dict=queue_dict,
                prompt_templates=EMPTY_PROMPT_TEMPLATES,
            )

tests/test_agents.py:1326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1688: in __init__
    queue_dict.setdefault(self.agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2c716380', 'setdefault', (1, &lt;queue.Queue object at 0x7feb2c820c20&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_validate_tools_and_managed_agents[tools0-managed_agents0-test_agent-expectation0]" time="0.050"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247eab40&gt;
tools = [&lt;tests.test_agents.MockTool object at 0x7feb247c2240&gt;, &lt;tests.test_agents.MockTool object at 0x7feb247c2300&gt;]
managed_agents = [&lt;tests.test_agents.MockAgent object at 0x7feb247c23f0&gt;], name = 'test_agent', expectation = &lt;contextlib.nullcontext object at 0x7feb247c2390&gt;

    @pytest.mark.parametrize(
        "tools, managed_agents, name, expectation",
        [
            # Valid case: no duplicates
            (
                [MockTool("tool1"), MockTool("tool2")],
                [MockAgent("agent1", [MockTool("tool3")])],
                "test_agent",
                does_not_raise(),
            ),
            # Invalid case: duplicate tool names
            ([MockTool("tool1"), MockTool("tool1")], [], "test_agent", pytest.raises(ValueError)),
            # Invalid case: tool name same as managed agent name
            (
                [MockTool("tool1")],
                [MockAgent("tool1", [MockTool("final_answer")])],
                "test_agent",
                pytest.raises(ValueError),
            ),
            # Valid case: tool name same as managed agent's tool name
            ([MockTool("tool1")], [MockAgent("agent1", [MockTool("tool1")])], "test_agent", does_not_raise()),
            # Invalid case: duplicate managed agent name and managed agent tool name
            ([MockTool("tool1")], [], "tool1", pytest.raises(ValueError)),
            # Valid case: duplicate tool names across managed agents
            (
                [MockTool("tool1")],
                [
                    MockAgent("agent1", [MockTool("tool2"), MockTool("final_answer")]),
                    MockAgent("agent2", [MockTool("tool2"), MockTool("final_answer")]),
                ],
                "test_agent",
                does_not_raise(),
            ),
        ],
    )
    def test_validate_tools_and_managed_agents(self, tools, managed_agents, name, expectation):
        fake_model = MagicMock()
        with expectation:
&gt;           DummyMultiStepAgent(
                tools=tools,
                model=fake_model,
                name=name,
                managed_agents=managed_agents,
            )

tests/test_agents.py:1376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2bd73100', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c83a7b0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_validate_tools_and_managed_agents[tools1-managed_agents1-test_agent-expectation1]" time="0.053"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247eade0&gt;
tools = [&lt;tests.test_agents.MockTool object at 0x7feb247c2420&gt;, &lt;tests.test_agents.MockTool object at 0x7feb247c22a0&gt;], managed_agents = [], name = 'test_agent'
expectation = RaisesExc(ValueError)

    @pytest.mark.parametrize(
        "tools, managed_agents, name, expectation",
        [
            # Valid case: no duplicates
            (
                [MockTool("tool1"), MockTool("tool2")],
                [MockAgent("agent1", [MockTool("tool3")])],
                "test_agent",
                does_not_raise(),
            ),
            # Invalid case: duplicate tool names
            ([MockTool("tool1"), MockTool("tool1")], [], "test_agent", pytest.raises(ValueError)),
            # Invalid case: tool name same as managed agent name
            (
                [MockTool("tool1")],
                [MockAgent("tool1", [MockTool("final_answer")])],
                "test_agent",
                pytest.raises(ValueError),
            ),
            # Valid case: tool name same as managed agent's tool name
            ([MockTool("tool1")], [MockAgent("agent1", [MockTool("tool1")])], "test_agent", does_not_raise()),
            # Invalid case: duplicate managed agent name and managed agent tool name
            ([MockTool("tool1")], [], "tool1", pytest.raises(ValueError)),
            # Valid case: duplicate tool names across managed agents
            (
                [MockTool("tool1")],
                [
                    MockAgent("agent1", [MockTool("tool2"), MockTool("final_answer")]),
                    MockAgent("agent2", [MockTool("tool2"), MockTool("final_answer")]),
                ],
                "test_agent",
                does_not_raise(),
            ),
        ],
    )
    def test_validate_tools_and_managed_agents(self, tools, managed_agents, name, expectation):
        fake_model = MagicMock()
        with expectation:
&gt;           DummyMultiStepAgent(
                tools=tools,
                model=fake_model,
                name=name,
                managed_agents=managed_agents,
            )

tests/test_agents.py:1376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2bc35940', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c882120&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_validate_tools_and_managed_agents[tools2-managed_agents2-test_agent-expectation2]" time="0.054"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247eaea0&gt;, tools = [&lt;tests.test_agents.MockTool object at 0x7feb26042fc0&gt;]
managed_agents = [&lt;tests.test_agents.MockAgent object at 0x7feb247c2480&gt;], name = 'test_agent', expectation = RaisesExc(ValueError)

    @pytest.mark.parametrize(
        "tools, managed_agents, name, expectation",
        [
            # Valid case: no duplicates
            (
                [MockTool("tool1"), MockTool("tool2")],
                [MockAgent("agent1", [MockTool("tool3")])],
                "test_agent",
                does_not_raise(),
            ),
            # Invalid case: duplicate tool names
            ([MockTool("tool1"), MockTool("tool1")], [], "test_agent", pytest.raises(ValueError)),
            # Invalid case: tool name same as managed agent name
            (
                [MockTool("tool1")],
                [MockAgent("tool1", [MockTool("final_answer")])],
                "test_agent",
                pytest.raises(ValueError),
            ),
            # Valid case: tool name same as managed agent's tool name
            ([MockTool("tool1")], [MockAgent("agent1", [MockTool("tool1")])], "test_agent", does_not_raise()),
            # Invalid case: duplicate managed agent name and managed agent tool name
            ([MockTool("tool1")], [], "tool1", pytest.raises(ValueError)),
            # Valid case: duplicate tool names across managed agents
            (
                [MockTool("tool1")],
                [
                    MockAgent("agent1", [MockTool("tool2"), MockTool("final_answer")]),
                    MockAgent("agent2", [MockTool("tool2"), MockTool("final_answer")]),
                ],
                "test_agent",
                does_not_raise(),
            ),
        ],
    )
    def test_validate_tools_and_managed_agents(self, tools, managed_agents, name, expectation):
        fake_model = MagicMock()
        with expectation:
&gt;           DummyMultiStepAgent(
                tools=tools,
                model=fake_model,
                name=name,
                managed_agents=managed_agents,
            )

tests/test_agents.py:1376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2934eec0', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c8202f0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_validate_tools_and_managed_agents[tools3-managed_agents3-test_agent-expectation3]" time="0.055"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247eaf60&gt;, tools = [&lt;tests.test_agents.MockTool object at 0x7feb247c2570&gt;]
managed_agents = [&lt;tests.test_agents.MockAgent object at 0x7feb247c25d0&gt;], name = 'test_agent', expectation = &lt;contextlib.nullcontext object at 0x7feb247c24b0&gt;

    @pytest.mark.parametrize(
        "tools, managed_agents, name, expectation",
        [
            # Valid case: no duplicates
            (
                [MockTool("tool1"), MockTool("tool2")],
                [MockAgent("agent1", [MockTool("tool3")])],
                "test_agent",
                does_not_raise(),
            ),
            # Invalid case: duplicate tool names
            ([MockTool("tool1"), MockTool("tool1")], [], "test_agent", pytest.raises(ValueError)),
            # Invalid case: tool name same as managed agent name
            (
                [MockTool("tool1")],
                [MockAgent("tool1", [MockTool("final_answer")])],
                "test_agent",
                pytest.raises(ValueError),
            ),
            # Valid case: tool name same as managed agent's tool name
            ([MockTool("tool1")], [MockAgent("agent1", [MockTool("tool1")])], "test_agent", does_not_raise()),
            # Invalid case: duplicate managed agent name and managed agent tool name
            ([MockTool("tool1")], [], "tool1", pytest.raises(ValueError)),
            # Valid case: duplicate tool names across managed agents
            (
                [MockTool("tool1")],
                [
                    MockAgent("agent1", [MockTool("tool2"), MockTool("final_answer")]),
                    MockAgent("agent2", [MockTool("tool2"), MockTool("final_answer")]),
                ],
                "test_agent",
                does_not_raise(),
            ),
        ],
    )
    def test_validate_tools_and_managed_agents(self, tools, managed_agents, name, expectation):
        fake_model = MagicMock()
        with expectation:
&gt;           DummyMultiStepAgent(
                tools=tools,
                model=fake_model,
                name=name,
                managed_agents=managed_agents,
            )

tests/test_agents.py:1376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2bcab940', 'setdefault', (0, &lt;queue.Queue object at 0x7fea03876750&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_validate_tools_and_managed_agents[tools4-managed_agents4-tool1-expectation4]" time="0.051"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247eb050&gt;, tools = [&lt;tests.test_agents.MockTool object at 0x7feb247c2660&gt;], managed_agents = [], name = 'tool1'
expectation = RaisesExc(ValueError)

    @pytest.mark.parametrize(
        "tools, managed_agents, name, expectation",
        [
            # Valid case: no duplicates
            (
                [MockTool("tool1"), MockTool("tool2")],
                [MockAgent("agent1", [MockTool("tool3")])],
                "test_agent",
                does_not_raise(),
            ),
            # Invalid case: duplicate tool names
            ([MockTool("tool1"), MockTool("tool1")], [], "test_agent", pytest.raises(ValueError)),
            # Invalid case: tool name same as managed agent name
            (
                [MockTool("tool1")],
                [MockAgent("tool1", [MockTool("final_answer")])],
                "test_agent",
                pytest.raises(ValueError),
            ),
            # Valid case: tool name same as managed agent's tool name
            ([MockTool("tool1")], [MockAgent("agent1", [MockTool("tool1")])], "test_agent", does_not_raise()),
            # Invalid case: duplicate managed agent name and managed agent tool name
            ([MockTool("tool1")], [], "tool1", pytest.raises(ValueError)),
            # Valid case: duplicate tool names across managed agents
            (
                [MockTool("tool1")],
                [
                    MockAgent("agent1", [MockTool("tool2"), MockTool("final_answer")]),
                    MockAgent("agent2", [MockTool("tool2"), MockTool("final_answer")]),
                ],
                "test_agent",
                does_not_raise(),
            ),
        ],
    )
    def test_validate_tools_and_managed_agents(self, tools, managed_agents, name, expectation):
        fake_model = MagicMock()
        with expectation:
&gt;           DummyMultiStepAgent(
                tools=tools,
                model=fake_model,
                name=name,
                managed_agents=managed_agents,
            )

tests/test_agents.py:1376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2baa5fc0', 'setdefault', (0, &lt;queue.Queue object at 0x7fe9c61d9970&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_validate_tools_and_managed_agents[tools5-managed_agents5-test_agent-expectation5]" time="0.052"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247eb140&gt;, tools = [&lt;tests.test_agents.MockTool object at 0x7feb247c26c0&gt;]
managed_agents = [&lt;tests.test_agents.MockAgent object at 0x7feb247c27b0&gt;, &lt;tests.test_agents.MockAgent object at 0x7feb247c2720&gt;], name = 'test_agent'
expectation = &lt;contextlib.nullcontext object at 0x7feb247c27e0&gt;

    @pytest.mark.parametrize(
        "tools, managed_agents, name, expectation",
        [
            # Valid case: no duplicates
            (
                [MockTool("tool1"), MockTool("tool2")],
                [MockAgent("agent1", [MockTool("tool3")])],
                "test_agent",
                does_not_raise(),
            ),
            # Invalid case: duplicate tool names
            ([MockTool("tool1"), MockTool("tool1")], [], "test_agent", pytest.raises(ValueError)),
            # Invalid case: tool name same as managed agent name
            (
                [MockTool("tool1")],
                [MockAgent("tool1", [MockTool("final_answer")])],
                "test_agent",
                pytest.raises(ValueError),
            ),
            # Valid case: tool name same as managed agent's tool name
            ([MockTool("tool1")], [MockAgent("agent1", [MockTool("tool1")])], "test_agent", does_not_raise()),
            # Invalid case: duplicate managed agent name and managed agent tool name
            ([MockTool("tool1")], [], "tool1", pytest.raises(ValueError)),
            # Valid case: duplicate tool names across managed agents
            (
                [MockTool("tool1")],
                [
                    MockAgent("agent1", [MockTool("tool2"), MockTool("final_answer")]),
                    MockAgent("agent2", [MockTool("tool2"), MockTool("final_answer")]),
                ],
                "test_agent",
                does_not_raise(),
            ),
        ],
    )
    def test_validate_tools_and_managed_agents(self, tools, managed_agents, name, expectation):
        fake_model = MagicMock()
        with expectation:
&gt;           DummyMultiStepAgent(
                tools=tools,
                model=fake_model,
                name=name,
                managed_agents=managed_agents,
            )

tests/test_agents.py:1376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2baee340', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c995760&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestMultiStepAgent" name="test_from_dict" time="0.050"><failure message="TypeError: cannot pickle '_thread.lock' object">self = &lt;tests.test_agents.TestMultiStepAgent object at 0x7feb247eb2c0&gt;

    def test_from_dict(self):
        # Create a test agent dictionary
        agent_dict = {
            "model": {"class": "TransformersModel", "data": {"model_id": "test/model"}},
            "tools": [
                {
                    "name": "valid_tool_function",
                    "code": 'from smolagents import Tool\nfrom typing import Any, Optional\n\nclass SimpleTool(Tool):\n    name = "valid_tool_function"\n    description = "A valid tool function."\n    inputs = {"input":{"type":"string","description":"Input string."}}\n    output_type = "string"\n\n    def forward(self, input: str) -&gt; str:\n        """A valid tool function.\n\n        Args:\n            input (str): Input string.\n        """\n        return input.upper()',
                    "requirements": {"smolagents"},
                }
            ],
            "managed_agents": {},
            "prompt_templates": EMPTY_PROMPT_TEMPLATES,
            "max_steps": 15,
            "verbosity_level": 2,
            "planning_interval": 3,
            "name": "test_agent",
            "description": "Test agent description",
        }
    
        # Call from_dict
        with patch("smolagents.models.TransformersModel") as mock_model_class:
            mock_model_instance = mock_model_class.from_dict.return_value
&gt;           agent = DummyMultiStepAgent.from_dict(agent_dict)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1406: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1181: in from_dict
    return cls(**agent_args)
           ^^^^^^^^^^^^^^^^^
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:300: in __init__
    queue_dict.setdefault(agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7feb2ba7eec0', 'setdefault', (0, &lt;queue.Queue object at 0x7feb2c9c5fa0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_toolcalling_agent_instructions" time="0.062"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': 'Test instructions', 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c84b0b0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247eb410&gt;

    def test_toolcalling_agent_instructions(self):
&gt;       agent = ToolCallingAgent(tools=[], model=MagicMock(), instructions="Test instructions")
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1433: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': 'Test instructions', 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c84b0b0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_toolcalling_agent_passes_both_tools_and_managed_agents" time="0.061"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {'managed_agent': &lt;MagicMock id='140648042290288'&gt;}, 'tools': {'final_...l object at 0x7feb2c84a960&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7feb2c9bd850&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247ea780&gt;, test_tool = &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7feb2c9bd850&gt;

    def test_toolcalling_agent_passes_both_tools_and_managed_agents(self, test_tool):
        """Test that both tools and managed agents are passed to the model."""
        managed_agent = MagicMock()
        managed_agent.name = "managed_agent"
        model = MagicMock()
        model.generate.return_value = ChatMessage(
            role=MessageRole.ASSISTANT,
            content="",
            tool_calls=[
                ChatMessageToolCall(
                    id="call_0",
                    type="function",
                    function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "test_value"}),
                )
            ],
        )
&gt;       agent = ToolCallingAgent(tools=[test_tool], managed_agents=[managed_agent], model=model)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1453: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {'managed_agent': &lt;MagicMock id='140648042290288'&gt;}, 'tools': {'final_...l object at 0x7feb2c84a960&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7feb2c9bd850&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_toolcalling_agent_api" time="0.061"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c8b6600&gt;, 'weather_api': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7feb2c8b6ed0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247e9ee0&gt;, mock_inference_client = &lt;MagicMock name='InferenceClient' id='140648040817600'&gt;

    @patch("huggingface_hub.InferenceClient")
    def test_toolcalling_agent_api(self, mock_inference_client):
        mock_client = mock_inference_client.return_value
        mock_response = mock_client.chat_completion.return_value
        mock_response.choices[0].message = ChatCompletionOutputMessage(
            role=MessageRole.ASSISTANT,
            content='{"name": "weather_api", "arguments": {"location": "Paris", "date": "today"}}',
        )
        mock_response.usage.prompt_tokens = 10
        mock_response.usage.completion_tokens = 20
    
        model = InferenceClientModel(model_id="test-model")
    
        from smolagents import tool
    
        @tool
        def weather_api(location: str, date: str) -&gt; str:
            """
            Gets the weather in the next days at given location.
            Args:
                location: the location
                date: the date
            """
            return f"The weather in {location} on date:{date} is sunny."
    
&gt;       agent = ToolCallingAgent(model=model, tools=[weather_api], max_steps=1)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1489: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c8b6600&gt;, 'weather_api': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7feb2c8b6ed0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_toolcalling_agent_stream_outputs_multiple_tool_calls" time="0.466"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c62d3a0&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7feb2c86b170&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247e99d0&gt;, mock_openai_client = &lt;MagicMock name='OpenAI' id='140648041068016'&gt;
test_tool = &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7feb2c86b170&gt;

    @patch("openai.OpenAI")
    def test_toolcalling_agent_stream_outputs_multiple_tool_calls(self, mock_openai_client, test_tool):
        """Test that ToolCallingAgent with stream_outputs=True returns the first final_answer when multiple are called."""
        mock_client = mock_openai_client.return_value
        from smolagents import OpenAIServerModel
    
        # Mock streaming response with multiple final_answer calls
        mock_deltas = [
            ChoiceDelta(role=MessageRole.ASSISTANT),
            ChoiceDelta(
                tool_calls=[
                    ChoiceDeltaToolCall(
                        index=0,
                        id="call_1",
                        function=ChoiceDeltaToolCallFunction(name="final_answer"),
                        type="function",
                    )
                ]
            ),
            ChoiceDelta(
                tool_calls=[ChoiceDeltaToolCall(index=0, function=ChoiceDeltaToolCallFunction(arguments='{"an'))]
            ),
            ChoiceDelta(
                tool_calls=[ChoiceDeltaToolCall(index=0, function=ChoiceDeltaToolCallFunction(arguments='swer"'))]
            ),
            ChoiceDelta(
                tool_calls=[ChoiceDeltaToolCall(index=0, function=ChoiceDeltaToolCallFunction(arguments=': "out'))]
            ),
            ChoiceDelta(
                tool_calls=[ChoiceDeltaToolCall(index=0, function=ChoiceDeltaToolCallFunction(arguments="put1"))]
            ),
            ChoiceDelta(
                tool_calls=[ChoiceDeltaToolCall(index=0, function=ChoiceDeltaToolCallFunction(arguments='"}'))]
            ),
            ChoiceDelta(
                tool_calls=[
                    ChoiceDeltaToolCall(
                        index=1,
                        id="call_2",
                        function=ChoiceDeltaToolCallFunction(name="test_tool"),
                        type="function",
                    )
                ]
            ),
            ChoiceDelta(
                tool_calls=[ChoiceDeltaToolCall(index=1, function=ChoiceDeltaToolCallFunction(arguments='{"in'))]
            ),
            ChoiceDelta(
                tool_calls=[ChoiceDeltaToolCall(index=1, function=ChoiceDeltaToolCallFunction(arguments='put"'))]
            ),
            ChoiceDelta(
                tool_calls=[ChoiceDeltaToolCall(index=1, function=ChoiceDeltaToolCallFunction(arguments=': "out'))]
            ),
            ChoiceDelta(
                tool_calls=[ChoiceDeltaToolCall(index=1, function=ChoiceDeltaToolCallFunction(arguments="put2"))]
            ),
            ChoiceDelta(
                tool_calls=[ChoiceDeltaToolCall(index=1, function=ChoiceDeltaToolCallFunction(arguments='"}'))]
            ),
        ]
    
        class MockChoice:
            def __init__(self, delta):
                self.delta = delta
    
        class MockChunk:
            def __init__(self, delta):
                self.choices = [MockChoice(delta)]
                self.usage = None
    
        mock_client.chat.completions.create.return_value = (MockChunk(delta) for delta in mock_deltas)
    
        # Mock usage for non-streaming fallback
        mock_usage = MagicMock()
        mock_usage.prompt_tokens = 10
        mock_usage.completion_tokens = 20
    
        model = OpenAIServerModel(model_id="fakemodel")
    
&gt;       agent = ToolCallingAgent(model=model, tools=[test_tool], max_steps=1, stream_outputs=True)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1595: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2c62d3a0&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7feb2c86b170&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_toolcalling_agent_api_misformatted_output" time="0.062"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd383fb0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247e9010&gt;, mock_inference_client = &lt;MagicMock name='InferenceClient' id='140642952479376'&gt;

    @patch("huggingface_hub.InferenceClient")
    def test_toolcalling_agent_api_misformatted_output(self, mock_inference_client):
        """Test that even misformatted json blobs don't interrupt the run for a ToolCallingAgent."""
        mock_client = mock_inference_client.return_value
        mock_response = mock_client.chat_completion.return_value
        mock_response.choices[0].message = ChatCompletionOutputMessage(
            role=MessageRole.ASSISTANT,
            content='{"name": weather_api", "arguments": {"location": "Paris", "date": "today"}}',
        )
    
        mock_response.usage.prompt_tokens = 10
        mock_response.usage.completion_tokens = 20
    
        model = InferenceClientModel(model_id="test-model")
    
        logger = AgentLogger(console=Console(markup=False, no_color=True))
    
&gt;       agent = ToolCallingAgent(model=model, tools=[], max_steps=2, verbosity_level=1, logger=logger)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1621: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd383fb0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_change_tools_after_init" time="0.000"><skipped type="pytest.skip" message="Test is not properly implemented (GH-1255) because fake_tools should have the same name. Additionally, it uses CodeAgent instead of ToolCallingAgent (GH-1409)">/home/ecca/GitFiles/dec_smolagents/tests/test_agents.py:1630: Test is not properly implemented (GH-1255) because fake_tools should have the same name. Additionally, it uses CodeAgent instead of ToolCallingAgent (GH-1409)</skipped></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_custom_final_answer_with_custom_inputs" time="0.061"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;tests.test_agents.TestToolCallingAgent....s object at 0x7fe9fd3435c0&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd341190&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247eb7d0&gt;, test_tool = &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd341190&gt;

    def test_custom_final_answer_with_custom_inputs(self, test_tool):
        class CustomFinalAnswerToolWithCustomInputs(FinalAnswerTool):
            inputs = {
                "answer1": {"type": "string", "description": "First part of the answer."},
                "answer2": {"type": "string", "description": "Second part of the answer."},
            }
    
            def forward(self, answer1: str, answer2: str) -&gt; str:
                return answer1 + " and " + answer2
    
        model = MagicMock()
        model.generate.return_value = ChatMessage(
            role=MessageRole.ASSISTANT,
            content=None,
            tool_calls=[
                ChatMessageToolCall(
                    id="call_0",
                    type="function",
                    function=ChatMessageToolCallFunction(
                        name="final_answer", arguments={"answer1": "1", "answer2": "2"}
                    ),
                ),
                ChatMessageToolCall(
                    id="call_1",
                    type="function",
                    function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "3"}),
                ),
            ],
        )
&gt;       agent = ToolCallingAgent(tools=[test_tool, CustomFinalAnswerToolWithCustomInputs()], model=model)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1688: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;tests.test_agents.TestToolCallingAgent....s object at 0x7fe9fd3435c0&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd341190&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_process_tool_calls[test_case0]" time="0.059"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd3635f0&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd362060&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247ebb90&gt;
test_case = {'expected_error': None, 'expected_final_outputs': ['Processed: test_value'], 'expected_model_output': "Tool call call_1: calling 'test_tool' with arguments: {'input': 'test_value'}", 'expected_observations': 'Processed: test_value', ...}
test_tool = &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd362060&gt;

    @pytest.mark.parametrize(
        "test_case",
        [
            # Case 0: Single valid tool call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "test_value"}),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'test_value'}",
                "expected_observations": "Processed: test_value",
                "expected_final_outputs": ["Processed: test_value"],
                "expected_error": None,
            },
            # Case 1: Multiple tool calls
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value1"}),
                    ),
                    ChatMessageToolCall(
                        id="call_2",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value2"}),
                    ),
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'value1'}\nTool call call_2: calling 'test_tool' with arguments: {'input': 'value2'}",
                "expected_observations": "Processed: value1\nProcessed: value2",
                "expected_final_outputs": ["Processed: value1", "Processed: value2"],
                "expected_error": None,
            },
            # Case 2: Invalid tool name
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="nonexistent_tool", arguments={"input": "test"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 3: Tool execution error
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "error"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 4: Empty tool calls list
            {
                "tool_calls": [],
                "expected_model_output": "",
                "expected_observations": "",
                "expected_final_outputs": [],
                "expected_error": None,
            },
            # Case 5: Final answer call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(
                            name="final_answer", arguments={"answer": "This is the final answer"}
                        ),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'final_answer' with arguments: {'answer': 'This is the final answer'}",
                "expected_observations": "This is the final answer",
                "expected_final_outputs": ["This is the final answer"],
                "expected_error": None,
            },
            # Case 6: Invalid arguments
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"wrong_param": "value"}),
                    )
                ],
                "expected_error": AgentToolCallError,
            },
        ],
    )
    def test_process_tool_calls(self, test_case, test_tool):
        # Create a ToolCallingAgent instance with the test tool
&gt;       agent = ToolCallingAgent(tools=[test_tool], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd3635f0&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd362060&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_process_tool_calls[test_case1]" time="0.063"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd333230&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd332030&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247ebda0&gt;
test_case = {'expected_error': None, 'expected_final_outputs': ['Processed: value1', 'Processed: value2'], 'expected_model_output'...'test_tool' with arguments: {'input': 'value2'}", 'expected_observations': 'Processed: value1\nProcessed: value2', ...}
test_tool = &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd332030&gt;

    @pytest.mark.parametrize(
        "test_case",
        [
            # Case 0: Single valid tool call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "test_value"}),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'test_value'}",
                "expected_observations": "Processed: test_value",
                "expected_final_outputs": ["Processed: test_value"],
                "expected_error": None,
            },
            # Case 1: Multiple tool calls
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value1"}),
                    ),
                    ChatMessageToolCall(
                        id="call_2",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value2"}),
                    ),
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'value1'}\nTool call call_2: calling 'test_tool' with arguments: {'input': 'value2'}",
                "expected_observations": "Processed: value1\nProcessed: value2",
                "expected_final_outputs": ["Processed: value1", "Processed: value2"],
                "expected_error": None,
            },
            # Case 2: Invalid tool name
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="nonexistent_tool", arguments={"input": "test"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 3: Tool execution error
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "error"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 4: Empty tool calls list
            {
                "tool_calls": [],
                "expected_model_output": "",
                "expected_observations": "",
                "expected_final_outputs": [],
                "expected_error": None,
            },
            # Case 5: Final answer call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(
                            name="final_answer", arguments={"answer": "This is the final answer"}
                        ),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'final_answer' with arguments: {'answer': 'This is the final answer'}",
                "expected_observations": "This is the final answer",
                "expected_final_outputs": ["This is the final answer"],
                "expected_error": None,
            },
            # Case 6: Invalid arguments
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"wrong_param": "value"}),
                    )
                ],
                "expected_error": AgentToolCallError,
            },
        ],
    )
    def test_process_tool_calls(self, test_case, test_tool):
        # Create a ToolCallingAgent instance with the test tool
&gt;       agent = ToolCallingAgent(tools=[test_tool], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd333230&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd332030&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_process_tool_calls[test_case2]" time="0.067"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd340b00&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd342120&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247ebe60&gt;
test_case = {'expected_error': &lt;class 'smolagents.utils.AgentToolExecutionError'&gt;, 'tool_calls': [ChatMessageToolCall(function=Cha...olCallFunction(arguments={'input': 'test'}, name='nonexistent_tool', description=None), id='call_1', type='function')]}
test_tool = &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd342120&gt;

    @pytest.mark.parametrize(
        "test_case",
        [
            # Case 0: Single valid tool call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "test_value"}),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'test_value'}",
                "expected_observations": "Processed: test_value",
                "expected_final_outputs": ["Processed: test_value"],
                "expected_error": None,
            },
            # Case 1: Multiple tool calls
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value1"}),
                    ),
                    ChatMessageToolCall(
                        id="call_2",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value2"}),
                    ),
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'value1'}\nTool call call_2: calling 'test_tool' with arguments: {'input': 'value2'}",
                "expected_observations": "Processed: value1\nProcessed: value2",
                "expected_final_outputs": ["Processed: value1", "Processed: value2"],
                "expected_error": None,
            },
            # Case 2: Invalid tool name
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="nonexistent_tool", arguments={"input": "test"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 3: Tool execution error
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "error"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 4: Empty tool calls list
            {
                "tool_calls": [],
                "expected_model_output": "",
                "expected_observations": "",
                "expected_final_outputs": [],
                "expected_error": None,
            },
            # Case 5: Final answer call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(
                            name="final_answer", arguments={"answer": "This is the final answer"}
                        ),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'final_answer' with arguments: {'answer': 'This is the final answer'}",
                "expected_observations": "This is the final answer",
                "expected_final_outputs": ["This is the final answer"],
                "expected_error": None,
            },
            # Case 6: Invalid arguments
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"wrong_param": "value"}),
                    )
                ],
                "expected_error": AgentToolCallError,
            },
        ],
    )
    def test_process_tool_calls(self, test_case, test_tool):
        # Create a ToolCallingAgent instance with the test tool
&gt;       agent = ToolCallingAgent(tools=[test_tool], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd340b00&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd342120&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_process_tool_calls[test_case3]" time="0.064"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2bf8d5b0&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd361970&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247ebf20&gt;
test_case = {'expected_error': &lt;class 'smolagents.utils.AgentToolExecutionError'&gt;, 'tool_calls': [ChatMessageToolCall(function=Cha...sageToolCallFunction(arguments={'input': 'error'}, name='test_tool', description=None), id='call_1', type='function')]}
test_tool = &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd361970&gt;

    @pytest.mark.parametrize(
        "test_case",
        [
            # Case 0: Single valid tool call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "test_value"}),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'test_value'}",
                "expected_observations": "Processed: test_value",
                "expected_final_outputs": ["Processed: test_value"],
                "expected_error": None,
            },
            # Case 1: Multiple tool calls
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value1"}),
                    ),
                    ChatMessageToolCall(
                        id="call_2",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value2"}),
                    ),
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'value1'}\nTool call call_2: calling 'test_tool' with arguments: {'input': 'value2'}",
                "expected_observations": "Processed: value1\nProcessed: value2",
                "expected_final_outputs": ["Processed: value1", "Processed: value2"],
                "expected_error": None,
            },
            # Case 2: Invalid tool name
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="nonexistent_tool", arguments={"input": "test"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 3: Tool execution error
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "error"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 4: Empty tool calls list
            {
                "tool_calls": [],
                "expected_model_output": "",
                "expected_observations": "",
                "expected_final_outputs": [],
                "expected_error": None,
            },
            # Case 5: Final answer call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(
                            name="final_answer", arguments={"answer": "This is the final answer"}
                        ),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'final_answer' with arguments: {'answer': 'This is the final answer'}",
                "expected_observations": "This is the final answer",
                "expected_final_outputs": ["This is the final answer"],
                "expected_error": None,
            },
            # Case 6: Invalid arguments
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"wrong_param": "value"}),
                    )
                ],
                "expected_error": AgentToolCallError,
            },
        ],
    )
    def test_process_tool_calls(self, test_case, test_tool):
        # Create a ToolCallingAgent instance with the test tool
&gt;       agent = ToolCallingAgent(tools=[test_tool], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7feb2bf8d5b0&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd361970&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_process_tool_calls[test_case4]" time="0.062"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd36fb90&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd36e8a0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb247ebfe0&gt;
test_case = {'expected_error': None, 'expected_final_outputs': [], 'expected_model_output': '', 'expected_observations': '', ...}
test_tool = &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd36e8a0&gt;

    @pytest.mark.parametrize(
        "test_case",
        [
            # Case 0: Single valid tool call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "test_value"}),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'test_value'}",
                "expected_observations": "Processed: test_value",
                "expected_final_outputs": ["Processed: test_value"],
                "expected_error": None,
            },
            # Case 1: Multiple tool calls
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value1"}),
                    ),
                    ChatMessageToolCall(
                        id="call_2",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value2"}),
                    ),
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'value1'}\nTool call call_2: calling 'test_tool' with arguments: {'input': 'value2'}",
                "expected_observations": "Processed: value1\nProcessed: value2",
                "expected_final_outputs": ["Processed: value1", "Processed: value2"],
                "expected_error": None,
            },
            # Case 2: Invalid tool name
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="nonexistent_tool", arguments={"input": "test"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 3: Tool execution error
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "error"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 4: Empty tool calls list
            {
                "tool_calls": [],
                "expected_model_output": "",
                "expected_observations": "",
                "expected_final_outputs": [],
                "expected_error": None,
            },
            # Case 5: Final answer call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(
                            name="final_answer", arguments={"answer": "This is the final answer"}
                        ),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'final_answer' with arguments: {'answer': 'This is the final answer'}",
                "expected_observations": "This is the final answer",
                "expected_final_outputs": ["This is the final answer"],
                "expected_error": None,
            },
            # Case 6: Invalid arguments
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"wrong_param": "value"}),
                    )
                ],
                "expected_error": AgentToolCallError,
            },
        ],
    )
    def test_process_tool_calls(self, test_case, test_tool):
        # Create a ToolCallingAgent instance with the test tool
&gt;       agent = ToolCallingAgent(tools=[test_tool], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd36fb90&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd36e8a0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_process_tool_calls[test_case5]" time="0.064"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd3412e0&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd362630&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb2480c0e0&gt;
test_case = {'expected_error': None, 'expected_final_outputs': ['This is the final answer'], 'expected_model_output': "Tool call c...wer' with arguments: {'answer': 'This is the final answer'}", 'expected_observations': 'This is the final answer', ...}
test_tool = &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd362630&gt;

    @pytest.mark.parametrize(
        "test_case",
        [
            # Case 0: Single valid tool call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "test_value"}),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'test_value'}",
                "expected_observations": "Processed: test_value",
                "expected_final_outputs": ["Processed: test_value"],
                "expected_error": None,
            },
            # Case 1: Multiple tool calls
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value1"}),
                    ),
                    ChatMessageToolCall(
                        id="call_2",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value2"}),
                    ),
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'value1'}\nTool call call_2: calling 'test_tool' with arguments: {'input': 'value2'}",
                "expected_observations": "Processed: value1\nProcessed: value2",
                "expected_final_outputs": ["Processed: value1", "Processed: value2"],
                "expected_error": None,
            },
            # Case 2: Invalid tool name
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="nonexistent_tool", arguments={"input": "test"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 3: Tool execution error
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "error"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 4: Empty tool calls list
            {
                "tool_calls": [],
                "expected_model_output": "",
                "expected_observations": "",
                "expected_final_outputs": [],
                "expected_error": None,
            },
            # Case 5: Final answer call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(
                            name="final_answer", arguments={"answer": "This is the final answer"}
                        ),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'final_answer' with arguments: {'answer': 'This is the final answer'}",
                "expected_observations": "This is the final answer",
                "expected_final_outputs": ["This is the final answer"],
                "expected_error": None,
            },
            # Case 6: Invalid arguments
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"wrong_param": "value"}),
                    )
                ],
                "expected_error": AgentToolCallError,
            },
        ],
    )
    def test_process_tool_calls(self, test_case, test_tool):
        # Create a ToolCallingAgent instance with the test tool
&gt;       agent = ToolCallingAgent(tools=[test_tool], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd3412e0&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd362630&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestToolCallingAgent" name="test_process_tool_calls[test_case6]" time="0.065"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd3c5760&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd3c6090&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestToolCallingAgent object at 0x7feb2480c1a0&gt;
test_case = {'expected_error': &lt;class 'smolagents.utils.AgentToolCallError'&gt;, 'tool_calls': [ChatMessageToolCall(function=ChatMess...olCallFunction(arguments={'wrong_param': 'value'}, name='test_tool', description=None), id='call_1', type='function')]}
test_tool = &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd3c6090&gt;

    @pytest.mark.parametrize(
        "test_case",
        [
            # Case 0: Single valid tool call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "test_value"}),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'test_value'}",
                "expected_observations": "Processed: test_value",
                "expected_final_outputs": ["Processed: test_value"],
                "expected_error": None,
            },
            # Case 1: Multiple tool calls
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value1"}),
                    ),
                    ChatMessageToolCall(
                        id="call_2",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "value2"}),
                    ),
                ],
                "expected_model_output": "Tool call call_1: calling 'test_tool' with arguments: {'input': 'value1'}\nTool call call_2: calling 'test_tool' with arguments: {'input': 'value2'}",
                "expected_observations": "Processed: value1\nProcessed: value2",
                "expected_final_outputs": ["Processed: value1", "Processed: value2"],
                "expected_error": None,
            },
            # Case 2: Invalid tool name
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="nonexistent_tool", arguments={"input": "test"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 3: Tool execution error
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"input": "error"}),
                    )
                ],
                "expected_error": AgentToolExecutionError,
            },
            # Case 4: Empty tool calls list
            {
                "tool_calls": [],
                "expected_model_output": "",
                "expected_observations": "",
                "expected_final_outputs": [],
                "expected_error": None,
            },
            # Case 5: Final answer call
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(
                            name="final_answer", arguments={"answer": "This is the final answer"}
                        ),
                    )
                ],
                "expected_model_output": "Tool call call_1: calling 'final_answer' with arguments: {'answer': 'This is the final answer'}",
                "expected_observations": "This is the final answer",
                "expected_final_outputs": ["This is the final answer"],
                "expected_error": None,
            },
            # Case 6: Invalid arguments
            {
                "tool_calls": [
                    ChatMessageToolCall(
                        id="call_1",
                        type="function",
                        function=ChatMessageToolCallFunction(name="test_tool", arguments={"wrong_param": "value"}),
                    )
                ],
                "expected_error": AgentToolCallError,
            },
        ],
    )
    def test_process_tool_calls(self, test_case, test_tool):
        # Create a ToolCallingAgent instance with the test tool
&gt;       agent = ToolCallingAgent(tools=[test_tool], model=MagicMock())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd3c5760&gt;, 'test_tool': &lt;tests.fixtures.tools.test_tool.&lt;locals&gt;.TestTool object at 0x7fe9fd3c6090&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_code_agent_instructions" time="0.075"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...ode_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': 'Test instructions', ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480c320&gt;

    def test_code_agent_instructions(self):
&gt;       agent = CodeAgent(tools=[], model=MagicMock(), instructions="Test instructions")
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1818: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...ode_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': 'Test instructions', ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_init_with_incompatible_grammar_and_use_structured_outputs_internally" time="0.083"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480c4d0&gt;

    @pytest.mark.filterwarnings("ignore")  # Ignore FutureWarning for deprecated grammar parameter
    def test_init_with_incompatible_grammar_and_use_structured_outputs_internally(self):
        # Test that using both parameters raises ValueError with correct message
        with pytest.raises(
            ValueError, match="You cannot use 'grammar' and 'use_structured_outputs_internally' at the same time."
        ):
            CodeAgent(
                tools=[],
                model=MagicMock(),
                grammar={"format": "json"},
                use_structured_outputs_internally=True,
                verbosity_level=LogLevel.DEBUG,
            )
    
        # Verify no error when only one option is used
        # Only grammar
&gt;       agent_with_grammar = CodeAgent(
            tools=[],
            model=MagicMock(),
            grammar={"format": "json"},
            use_structured_outputs_internally=False,
            verbosity_level=LogLevel.DEBUG,
        )

tests/test_agents.py:1844: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_call_with_provide_run_summary[False]" time="0.071"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480c6e0&gt;, provide_run_summary = False

    @pytest.mark.parametrize("provide_run_summary", [False, True])
    def test_call_with_provide_run_summary(self, provide_run_summary):
&gt;       agent = CodeAgent(tools=[], model=MagicMock(), provide_run_summary=provide_run_summary)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1867: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_call_with_provide_run_summary[True]" time="0.069"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480c800&gt;, provide_run_summary = True

    @pytest.mark.parametrize("provide_run_summary", [False, True])
    def test_call_with_provide_run_summary(self, provide_run_summary):
&gt;       agent = CodeAgent(tools=[], model=MagicMock(), provide_run_summary=provide_run_summary)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1867: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_code_agent_image_output" time="0.067"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480c980&gt;

    def test_code_agent_image_output(self):
        from PIL import Image
    
        from smolagents import tool
    
        @tool
        def image_generation_tool():
            """Generate an image"""
            return Image.new("RGB", (100, 100), color="red")
    
&gt;       agent = CodeAgent(tools=[image_generation_tool], model=FakeCodeModelImageGeneration(), verbosity_level=1)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_errors_logging" time="0.074"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480cb30&gt;

    def test_errors_logging(self):
        class FakeCodeModel(Model):
            def generate(self, messages, stop_sequences=None):
                return ChatMessage(role=MessageRole.ASSISTANT, content="&lt;code&gt;\nsecret=3;['1', '2'][secret]\n&lt;/code&gt;")
    
&gt;       agent = CodeAgent(tools=[], model=FakeCodeModel(), verbosity_level=1)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_missing_import_triggers_advice_in_error_log" time="0.090"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480cce0&gt;

    def test_missing_import_triggers_advice_in_error_log(self):
        # Set explicit verbosity level to 1 to override the default verbosity level of -1 set in CI fixture
&gt;       agent = CodeAgent(tools=[], model=FakeCodeModelImport(), verbosity_level=1)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1911: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_errors_show_offending_line_and_error" time="0.076"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480ce90&gt;

    def test_errors_show_offending_line_and_error(self):
&gt;       agent = CodeAgent(tools=[PythonInterpreterTool()], model=FakeCodeModelError())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1919: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_error_saves_previous_print_outputs" time="0.061"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480d040&gt;

    def test_error_saves_previous_print_outputs(self):
&gt;       agent = CodeAgent(tools=[PythonInterpreterTool()], model=FakeCodeModelError(), verbosity_level=10)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1927: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_syntax_error_show_offending_lines" time="0.066"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480d1f0&gt;

    def test_syntax_error_show_offending_lines(self):
&gt;       agent = CodeAgent(tools=[PythonInterpreterTool()], model=FakeCodeModelSyntaxError())
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:1932: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_end_code_appending" time="0.072"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480d3a0&gt;

    def test_end_code_appending(self):
        # Checking original output message
        orig_output = FakeCodeModelNoReturn().generate([])
        assert not orig_output.content.endswith("&lt;end_code&gt;")
    
        # Checking the step output
&gt;       agent = CodeAgent(
            tools=[PythonInterpreterTool()],
            model=FakeCodeModelNoReturn(),
            max_steps=1,
        )

tests/test_agents.py:1949: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_change_tools_after_init" time="0.000"><skipped type="pytest.skip" message="Test is not properly implemented (GH-1255) because fake_tools should have the same name.">/home/ecca/GitFiles/dec_smolagents/tests/test_agents.py:1968: Test is not properly implemented (GH-1255) because fake_tools should have the same name.</skipped></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_local_python_executor_with_custom_functions" time="0.071"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb247e9eb0&gt;

    def test_local_python_executor_with_custom_functions(self):
        model = MagicMock()
        model.generate.return_value = ChatMessage(
            role=MessageRole.ASSISTANT,
            content="",
            tool_calls=None,
            raw="",
            token_usage=None,
        )
&gt;       agent = CodeAgent(tools=[], model=model, executor_kwargs={"additional_functions": {"open": open}})
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:2005: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_from_folder[v1.9]" time="0.052" /><testcase classname="tests.test_agents.TestCodeAgent" name="test_from_folder[v1.10]" time="0.052" /><testcase classname="tests.test_agents.TestCodeAgent" name="test_from_dict" time="0.081"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480c680&gt;

    def test_from_dict(self):
        # Create a test agent dictionary
        agent_dict = {
            "model": {"class": "InferenceClientModel", "data": {"model_id": "Qwen/Qwen2.5-Coder-32B-Instruct"}},
            "tools": [
                {
                    "name": "valid_tool_function",
                    "code": 'from smolagents import Tool\nfrom typing import Any, Optional\n\nclass SimpleTool(Tool):\n    name = "valid_tool_function"\n    description = "A valid tool function."\n    inputs = {"input":{"type":"string","description":"Input string."}}\n    output_type = "string"\n\n    def forward(self, input: str) -&gt; str:\n        """A valid tool function.\n\n        Args:\n            input (str): Input string.\n        """\n        return input.upper()',
                    "requirements": {"smolagents"},
                }
            ],
            "managed_agents": {},
            "prompt_templates": EMPTY_PROMPT_TEMPLATES,
            "max_steps": 15,
            "verbosity_level": 2,
            "use_structured_output": False,
            "planning_interval": 3,
            "name": "test_code_agent",
            "description": "Test code agent description",
            "authorized_imports": ["pandas", "numpy"],
            "executor_type": "local",
            "executor_kwargs": {"max_print_outputs_length": 10_000},
            "max_print_outputs_length": 1000,
        }
    
        # Call from_dict
        with patch("smolagents.models.InferenceClientModel") as mock_model_class:
            mock_model_instance = mock_model_class.from_dict.return_value
            agent = CodeAgent.from_dict(agent_dict)
    
        # Verify the agent was created correctly with CodeAgent-specific parameters
        assert agent.model == mock_model_instance
        assert agent.additional_authorized_imports == ["pandas", "numpy"]
        assert agent.executor_type == "local"
        assert agent.executor_kwargs == {"max_print_outputs_length": 10_000}
        assert agent.max_print_outputs_length == 1000
    
        # Test with missing optional parameters
        minimal_agent_dict = {
            "model": {"class": "InferenceClientModel", "data": {"model_id": "Qwen/Qwen2.5-Coder-32B-Instruct"}},
            "tools": [],
            "managed_agents": {},
        }
    
        with patch("smolagents.models.InferenceClientModel"):
&gt;           agent = CodeAgent.from_dict(minimal_agent_dict)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:2084: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1812: in from_dict
    return super().from_dict(agent_dict, **code_agent_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1181: in from_dict
    return cls(**agent_args)
           ^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestCodeAgent" name="test_custom_final_answer_with_custom_inputs" time="0.076"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestCodeAgent object at 0x7feb2480c290&gt;

    def test_custom_final_answer_with_custom_inputs(self):
        class CustomFinalAnswerToolWithCustomInputs(FinalAnswerTool):
            inputs = {
                "answer1": {"type": "string", "description": "First part of the answer."},
                "answer2": {"type": "string", "description": "Second part of the answer."},
            }
    
            def forward(self, answer1: str, answer2: str) -&gt; str:
                return answer1 + "CUSTOM" + answer2
    
        model = MagicMock()
        model.generate.return_value = ChatMessage(
            role=MessageRole.ASSISTANT, content="&lt;code&gt;\nfinal_answer(answer1='1', answer2='2')\n&lt;/code&gt;"
        )
&gt;       agent = CodeAgent(tools=[CustomFinalAnswerToolWithCustomInputs()], model=model)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:2112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestMultiAgents" name="test_multiagents_save" time="0.114"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerToo...ool object at 0x7feb2c821730&gt;, 'web_search': &lt;smolagents.default_tools.DuckDuckGoSearchTool object at 0x7fe9fd325550&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestMultiAgents object at 0x7feb2480d670&gt;, tmp_path = PosixPath('/tmp/pytest-of-ecca/pytest-6/test_multiagents_save0')

    def test_multiagents_save(self, tmp_path):
        model = InferenceClientModel(model_id="Qwen/Qwen2.5-Coder-32B-Instruct", max_tokens=2096, temperature=0.5)
    
&gt;       web_agent = ToolCallingAgent(
            model=model,
            tools=[DuckDuckGoSearchTool(max_results=2), VisitWebpageTool()],
            name="web_agent",
            description="does web searches",
        )

tests/test_agents.py:2121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerToo...ool object at 0x7feb2c821730&gt;, 'web_search': &lt;smolagents.default_tools.DuckDuckGoSearchTool object at 0x7fe9fd325550&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents.TestMultiAgents" name="test_multiagents" time="0.063"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd380770&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_agents.TestMultiAgents object at 0x7feb2480d820&gt;

        def test_multiagents(self):
            class FakeModelMultiagentsManagerAgent(Model):
                model_id = "fake_model"
    
                def generate(
                    self,
                    messages,
                    stop_sequences=None,
                    tools_to_call_from=None,
                ):
                    if tools_to_call_from is not None:
                        if len(messages) &lt; 3:
                            return ChatMessage(
                                role=MessageRole.ASSISTANT,
                                content="",
                                tool_calls=[
                                    ChatMessageToolCall(
                                        id="call_0",
                                        type="function",
                                        function=ChatMessageToolCallFunction(
                                            name="search_agent",
                                            arguments="Who is the current US president?",
                                        ),
                                    )
                                ],
                            )
                        else:
                            assert "Report on the current US president" in str(messages)
                            return ChatMessage(
                                role=MessageRole.ASSISTANT,
                                content="",
                                tool_calls=[
                                    ChatMessageToolCall(
                                        id="call_0",
                                        type="function",
                                        function=ChatMessageToolCallFunction(
                                            name="final_answer", arguments="Final report."
                                        ),
                                    )
                                ],
                            )
                    else:
                        if len(messages) &lt; 3:
                            return ChatMessage(
                                role=MessageRole.ASSISTANT,
                                content="""
    Thought: Let's call our search agent.
    &lt;code&gt;
    result = search_agent("Who is the current US president?")
    &lt;/code&gt;
    """,
                            )
                        else:
                            assert "Report on the current US president" in str(messages)
                            return ChatMessage(
                                role=MessageRole.ASSISTANT,
                                content="""
    Thought: Let's return the report.
    &lt;code&gt;
    final_answer("Final report.")
    &lt;/code&gt;
    """,
                            )
    
            manager_model = FakeModelMultiagentsManagerAgent()
    
            class FakeModelMultiagentsManagedAgent(Model):
                model_id = "fake_model"
    
                def generate(
                    self,
                    messages,
                    tools_to_call_from=None,
                    stop_sequences=None,
                ):
                    return ChatMessage(
                        role=MessageRole.ASSISTANT,
                        content="Here is the secret content: FLAG1",
                        tool_calls=[
                            ChatMessageToolCall(
                                id="call_0",
                                type="function",
                                function=ChatMessageToolCallFunction(
                                    name="final_answer",
                                    arguments="Report on the current US president",
                                ),
                            )
                        ],
                    )
    
            managed_model = FakeModelMultiagentsManagedAgent()
    
&gt;           web_agent = ToolCallingAgent(
                tools=[],
                model=managed_model,
                max_steps=10,
                name="search_agent",
                description="Runs web searches for you. Give it your request as an argument. Make the request as detailed as needed, you can ask for thorough reports",
                verbosity_level=2,
            )

tests/test_agents.py:2273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd380770&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents" name="test_tool_calling_agents_raises_tool_call_error_being_invoked_with_wrong_arguments[arguments0]" time="0.058"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'_sample_tool': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7fe9fd341df0&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd342810&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

arguments = {}

    @pytest.mark.parametrize(
        "arguments",
        [
            {},
            {"arg": "bar"},
            {None: None},
            [1, 2, 3],
        ],
    )
    def test_tool_calling_agents_raises_tool_call_error_being_invoked_with_wrong_arguments(arguments):
        @tool
        def _sample_tool(prompt: str) -&gt; str:
            """Tool that returns same string
            Args:
                prompt: The string to return
            Returns:
                The same string
            """
    
            return prompt
    
&gt;       agent = ToolCallingAgent(model=FakeToolCallModel(), tools=[_sample_tool])
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:2344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'_sample_tool': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7fe9fd341df0&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd342810&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents" name="test_tool_calling_agents_raises_tool_call_error_being_invoked_with_wrong_arguments[arguments1]" time="0.057"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'_sample_tool': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7feb2c82d160&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fea03876300&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

arguments = {'arg': 'bar'}

    @pytest.mark.parametrize(
        "arguments",
        [
            {},
            {"arg": "bar"},
            {None: None},
            [1, 2, 3],
        ],
    )
    def test_tool_calling_agents_raises_tool_call_error_being_invoked_with_wrong_arguments(arguments):
        @tool
        def _sample_tool(prompt: str) -&gt; str:
            """Tool that returns same string
            Args:
                prompt: The string to return
            Returns:
                The same string
            """
    
            return prompt
    
&gt;       agent = ToolCallingAgent(model=FakeToolCallModel(), tools=[_sample_tool])
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:2344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'_sample_tool': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7feb2c82d160&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fea03876300&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents" name="test_tool_calling_agents_raises_tool_call_error_being_invoked_with_wrong_arguments[arguments2]" time="0.053"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'_sample_tool': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7fe9fd357bc0&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd357ad0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

arguments = {None: None}

    @pytest.mark.parametrize(
        "arguments",
        [
            {},
            {"arg": "bar"},
            {None: None},
            [1, 2, 3],
        ],
    )
    def test_tool_calling_agents_raises_tool_call_error_being_invoked_with_wrong_arguments(arguments):
        @tool
        def _sample_tool(prompt: str) -&gt; str:
            """Tool that returns same string
            Args:
                prompt: The string to return
            Returns:
                The same string
            """
    
            return prompt
    
&gt;       agent = ToolCallingAgent(model=FakeToolCallModel(), tools=[_sample_tool])
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:2344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'_sample_tool': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7fe9fd357bc0&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd357ad0&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents" name="test_tool_calling_agents_raises_tool_call_error_being_invoked_with_wrong_arguments[arguments3]" time="0.054"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'_sample_tool': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7fe9fd3407a0&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd340920&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

arguments = [1, 2, 3]

    @pytest.mark.parametrize(
        "arguments",
        [
            {},
            {"arg": "bar"},
            {None: None},
            [1, 2, 3],
        ],
    )
    def test_tool_calling_agents_raises_tool_call_error_being_invoked_with_wrong_arguments(arguments):
        @tool
        def _sample_tool(prompt: str) -&gt; str:
            """Tool that returns same string
            Args:
                prompt: The string to return
            Returns:
                The same string
            """
    
            return prompt
    
&gt;       agent = ToolCallingAgent(model=FakeToolCallModel(), tools=[_sample_tool])
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:2344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'_sample_tool': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7fe9fd3407a0&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd340920&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_agents" name="test_tool_calling_agents_raises_agent_execution_error_when_tool_raises" time="0.053"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'_sample_tool': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7fe9fd3556a0&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd354a70&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;, source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

    def test_tool_calling_agents_raises_agent_execution_error_when_tool_raises():
        @tool
        def _sample_tool(_: str) -&gt; float:
            """Tool that fails
    
            Args:
                _: The pointless string
            Returns:
                Some number
            """
    
            return 1 / 0
    
&gt;       agent = ToolCallingAgent(model=FakeToolCallModel(), tools=[_sample_tool])
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_agents.py:2362: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'_sample_tool': &lt;smolagents.tools.tool.&lt;locals&gt;.SimpleTool object at 0x7fe9fd3556a0&gt;, 'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9fd354a70&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[index]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[installation]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[guided_tour]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[react]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[intro_agents]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[text_to_sql]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[plan_customization]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[multiagents]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[async_agent]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[using_different_models]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[web_browser]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[rag]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[tools0]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[building_good_agents]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[secure_code_execution]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[memory]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[inspect_runs]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[tools1]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[agents]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[models]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_all_docs.TestDocs" name="test_single_doc[default_tools]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_all_docs.py:107: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_cli" name="test_multi_agent_cli" time="3.112" /><testcase classname="tests.test_cli" name="test_load_model_openai_server_model" time="0.045" /><testcase classname="tests.test_cli" name="test_load_model_litellm_model" time="1.570" /><testcase classname="tests.test_cli" name="test_load_model_transformers_model" time="0.051" /><testcase classname="tests.test_cli" name="test_load_model_hf_api_model" time="0.055" /><testcase classname="tests.test_cli" name="test_load_model_invalid_model_type" time="0.046" /><testcase classname="tests.test_cli" name="test_cli_main" time="0.119" /><testcase classname="tests.test_cli" name="test_vision_web_browser_main" time="0.144" /><testcase classname="tests.test_decentralized_run" name="test_decentralized_run" time="0.119"><failure message="TypeError: cannot pickle '_thread.lock' object">tmp_path = PosixPath('/tmp/pytest-of-ecca/pytest-6/test_decentralized_run0'), monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7fe9ceaffe00&gt;

    def test_decentralized_run(tmp_path, monkeypatch):
        monkeypatch.setattr(dec_run.datasets, "get_dataset_config_names", lambda ds: ["gaia", "math", "simpleqa"])
        fake_datasets = {
            "gaia": Dataset.from_dict({"question": ["red planet?"], "true_answer": ["Mars"], "source": ["GAIA"]}),
            "math": Dataset.from_dict({"question": ["2+2?"], "true_answer": ["4"], "source": ["MATH"]}),
            "simpleqa": Dataset.from_dict(
                {"question": ["author of 1984?"], "true_answer": ["George Orwell"], "source": ["SimpleQA"]}
            ),
        }
        monkeypatch.setattr(dec_run.datasets, "load_dataset", lambda dataset, task, split=None: fake_datasets[task])
        monkeypatch.setattr(dec_run, "GoogleSearchTool", lambda provider="serper": DummyTool("search"))
        monkeypatch.setattr(dec_run, "VisitWebpageTool", lambda *args, **kwargs: DummyTool("visit"))
    
        class DummyModel(FakeCodeModel):
            def __init__(self):
                super().__init__(model_id="dummy-model")
    
        monkeypatch.setattr(dec_run, "InferenceClientModel", lambda model_id, provider=None, max_tokens=8192: DummyModel())
    
        eval_ds = dec_run.load_eval_dataset("dummy", num_examples=1)
        model = dec_run.InferenceClientModel("dummy-model")
&gt;       dec_run.answer_questions(eval_ds, model, date="2025-01-01", parallel_workers=1, output_dir=str(tmp_path))

tests/test_decentralized_run.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
examples/decentralized_smolagents_benchmark/run.py:239: in answer_questions
    f.result()
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/concurrent/futures/_base.py:449: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/concurrent/futures/thread.py:59: in run
    result = self.fn(*self.args, **self.kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
examples/decentralized_smolagents_benchmark/run.py:147: in answer_single_question
    agent = CodeAgent(
src/smolagents/agents.py:1688: in __init__
    queue_dict.setdefault(self.agent_id, Queue())
&lt;string&gt;:2: in setdefault
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/managers.py:827: in _callmethod
    conn.send((self._id, methodname, args, kwds))
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/connection.py:206: in send
    self._send_bytes(_ForkingPickler.dumps(obj))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = &lt;class 'multiprocessing.reduction.ForkingPickler'&gt;, obj = ('7fe9ce9192c0', 'setdefault', (1, &lt;queue.Queue object at 0x7fe9ceafc6e0&gt;), {}), protocol = None

    @classmethod
    def dumps(cls, obj, protocol=None):
        buf = io.BytesIO()
&gt;       cls(buf, protocol).dump(obj)
E       TypeError: cannot pickle '_thread.lock' object

../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/multiprocessing/reduction.py:51: TypeError</failure></testcase><testcase classname="tests.test_default_tools.DefaultToolTests" name="test_ddgs_with_kwargs" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/smolagents/tests/test_default_tools.py:39: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_default_tools.DefaultToolTests" name="test_visit_webpage" time="0.479" /><testcase classname="tests.test_default_tools.TestPythonInterpreterTool" name="test_inputs_output" time="0.047" /><testcase classname="tests.test_default_tools.TestPythonInterpreterTool" name="test_common_attributes" time="0.048" /><testcase classname="tests.test_default_tools.TestPythonInterpreterTool" name="test_exact_match_arg" time="0.048" /><testcase classname="tests.test_default_tools.TestPythonInterpreterTool" name="test_exact_match_kwarg" time="0.045" /><testcase classname="tests.test_default_tools.TestPythonInterpreterTool" name="test_agent_type_output" time="0.051" /><testcase classname="tests.test_default_tools.TestPythonInterpreterTool" name="test_agent_types_inputs" time="0.051" /><testcase classname="tests.test_default_tools.TestPythonInterpreterTool" name="test_imports_work" time="0.081" /><testcase classname="tests.test_default_tools.TestPythonInterpreterTool" name="test_unauthorized_imports_fail" time="0.052" /><testcase classname="tests.test_default_tools.TestSpeechToTextTool" name="test_new_instance" time="0.074" /><testcase classname="tests.test_default_tools.TestSpeechToTextTool" name="test_initialization" time="0.046" /><testcase classname="tests.test_default_tools" name="test_wikipedia_search[en-summary-HTML-Python_(programming_language)]" time="0.916" /><testcase classname="tests.test_default_tools" name="test_wikipedia_search[en-text-WIKI-Python_(programming_language)]" time="0.922" /><testcase classname="tests.test_default_tools" name="test_wikipedia_search[es-summary-HTML-Python_(lenguaje_de_programaci\xf3n)]" time="0.605" /><testcase classname="tests.test_default_tools" name="test_wikipedia_search[es-text-WIKI-Python_(lenguaje_de_programaci\xf3n)]" time="0.519" /><testcase classname="tests.test_final_answer.TestFinalAnswerTool" name="test_inputs_output" time="0.054" /><testcase classname="tests.test_final_answer.TestFinalAnswerTool" name="test_common_attributes" time="0.056" /><testcase classname="tests.test_final_answer.TestFinalAnswerTool" name="test_exact_match_arg" time="0.047" /><testcase classname="tests.test_final_answer.TestFinalAnswerTool" name="test_exact_match_kwarg" time="0.046" /><testcase classname="tests.test_final_answer.TestFinalAnswerTool" name="test_agent_type_output" time="0.087" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_get_json_schema_example" time="0.047" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_get_json_schema[valid_func-False]" time="0.050" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_get_json_schema[bad_return_func-False]" time="0.046" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_get_json_schema_raises[no_docstring_func-True]" time="0.049" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_get_json_schema_raises[missing_arg_doc_func-True]" time="0.044" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_property_types[valid_func-expected_properties0]" time="0.045" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_property_types[bad_return_func-expected_properties1]" time="0.044" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_schema_basic_structure" time="0.039" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_complex_types" time="0.041" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_optional_types" time="0.042" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_enum_choices" time="0.043" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_union_types" time="0.043" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_nested_types" time="0.046" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_typed_docstring_parsing" time="0.055" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_mismatched_docstring_types" time="0.042" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_complex_docstring_types" time="0.044" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_type_in_description_handling[typed_docstring_func-An integer parameter with type in docstring.]" time="0.043" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_type_in_description_handling[complex_docstring_types_func-Nested structure with types.]" time="0.045" /><testcase classname="tests.test_function_type_hints_utils.TestGetJsonSchema" name="test_with_special_words_in_description_func" time="0.050" /><testcase classname="tests.test_function_type_hints_utils.TestGetCode" name="test_get_imports[\n        import numpy\n        import pandas\n        -expected0]" time="0.054" /><testcase classname="tests.test_function_type_hints_utils.TestGetCode" name="test_get_imports[\n        from torch import nn\n        from transformers import AutoModel\n        -expected1]" time="0.058" /><testcase classname="tests.test_function_type_hints_utils.TestGetCode" name="test_get_imports[\n        import numpy as np\n        from torch.nn import Linear\n        import os.path\n        -expected2]" time="0.056" /><testcase classname="tests.test_function_type_hints_utils.TestGetCode" name="test_get_imports[\n        try:\n            import torch\n        except ImportError:\n            pass\n        import numpy\n        -expected3]" time="0.044" /><testcase classname="tests.test_function_type_hints_utils.TestGetCode" name="test_get_imports[\n        if is_flash_attn_2_available():\n            from flash_attn import flash_attn_func\n        import transformers\n        -expected4]" time="0.044" /><testcase classname="tests.test_function_type_hints_utils.TestGetCode" name="test_get_imports[\n        from .utils import helper\n        from ..models import transformer\n        -expected5]" time="0.048" /><testcase classname="tests.test_gradio_ui.GradioUITester" name="test_upload_file_custom_types" time="1.503" /><testcase classname="tests.test_gradio_ui.GradioUITester" name="test_upload_file_default_types" time="0.076" /><testcase classname="tests.test_gradio_ui.GradioUITester" name="test_upload_file_default_types_disallowed" time="0.055" /><testcase classname="tests.test_gradio_ui.GradioUITester" name="test_upload_file_invalid_type" time="0.049" /><testcase classname="tests.test_gradio_ui.GradioUITester" name="test_upload_file_none" time="0.048" /><testcase classname="tests.test_gradio_ui.GradioUITester" name="test_upload_file_special_chars" time="0.049" /><testcase classname="tests.test_gradio_ui.GradioUITester" name="test_upload_file_success" time="0.055" /><testcase classname="tests.test_gradio_ui.TestStreamToGradio" name="test_stream_to_gradio_memory_step" time="0.070" /><testcase classname="tests.test_gradio_ui.TestStreamToGradio" name="test_stream_to_gradio_stream_delta" time="0.075" /><testcase classname="tests.test_gradio_ui.TestStreamToGradio" name="test_stream_to_gradio_multiple_deltas" time="0.066" /><testcase classname="tests.test_gradio_ui.TestStreamToGradio" name="test_stream_to_gradio_parameters[simple task-None-False-None]" time="0.071" /><testcase classname="tests.test_gradio_ui.TestStreamToGradio" name="test_stream_to_gradio_parameters[task with images-task_images1-False-None]" time="0.052" /><testcase classname="tests.test_gradio_ui.TestStreamToGradio" name="test_stream_to_gradio_parameters[task with reset-None-True-None]" time="0.064" /><testcase classname="tests.test_gradio_ui.TestStreamToGradio" name="test_stream_to_gradio_parameters[task with args-None-False-additional_args3]" time="0.063" /><testcase classname="tests.test_gradio_ui.TestStreamToGradio" name="test_stream_to_gradio_parameters[complex task-task_images4-True-additional_args4]" time="0.053" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_action_step_basic" time="0.055" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_action_step_with_tool_calls" time="0.058" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_action_step_tool_call_formats[python_interpreter-print('Hello')-```python\nprint('Hello')\n```]" time="0.055" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_action_step_tool_call_formats[regular_tool-args1-{'key': 'value'}]" time="0.054" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_action_step_tool_call_formats[string_args_tool-simple string-simple string]" time="0.065" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_action_step_with_error" time="0.057" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_action_step_with_images" time="0.060" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_planning_step[False-4-token_usage0]" time="0.054" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_planning_step[True-2-None]" time="0.053" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_final_answer_step[AgentText-This is a text answer-**Final answer:**\nThis is a text answer\n]" time="0.053" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_final_answer_step[&lt;lambda&gt;-Plain string-**Final answer:** Plain string]" time="0.053" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_final_answer_step_image" time="0.056" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_final_answer_step_audio" time="0.060" /><testcase classname="tests.test_gradio_ui.TestPullMessagesFromStep" name="test_unsupported_step_type" time="0.049" /><testcase classname="tests.test_import" name="test_import_smolagents_without_extras" time="2.037" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_assign" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_assignment_cannot_overwrite_tool" time="0.042" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_subscript_call" time="0.051" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_call" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_class_def" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_class_def_with_assign_attribute_target" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_constant" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_dict" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_expression" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_f_string" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_f_string_with_format" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_f_string_with_complex_format" time="0.041" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_if" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_list" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_name" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_subscript" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_subscript_string_with_string_index_raises_appropriate_error" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_for" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_binop" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_recursive_function" time="0.057" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_max_operations" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_operations_count" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_string_methods" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_slicing" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_access_attributes" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_list_comprehension" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_string_indexing" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_tuples" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_listcomp" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_setcomp" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_break_continue" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_call_int" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_lambda" time="0.041" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_dictcomp" time="0.041" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_tuple_assignment" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_while" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_generator" time="0.062" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_boolops" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_if_conditions" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_imports" time="0.199" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_additional_imports" time="0.103" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_multiple_comparators" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_print_output" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_tuple_target_in_iterator" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_classes" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_variable_args" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_exceptions" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_print" time="0.042" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_types_as_objects" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_tuple_id" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_nonsimple_augassign" time="0.042" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_adding_int_to_list_raises_error" time="0.042" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_error_highlights_correct_line_of_code" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_error_type_returned_in_function_call" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_assert" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_with_context_manager" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_default_arg_in_function" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_set" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_break" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_return" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_nested_for_loop" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_pandas" time="0.122" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_starred" time="0.042" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_for" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_syntax_error_points_error" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_close_matches_subscript" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_dangerous_builtins_calls_are_blocked" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_final_answer_accepts_kwarg_answer" time="0.041" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_dangerous_builtins_are_callable_if_explicitly_added" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_can_import_os_if_explicitly_authorized" time="0.042" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_can_import_os_if_all_imports_authorized" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_can_import_scipy_if_explicitly_authorized" time="0.141" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_can_import_sklearn_if_explicitly_authorized" time="0.515" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_function_def_recovers_source_code" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_class_def_with_pass" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_class_def_with_ann_assign_name" time="0.053" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_class_def_with_ann_assign_attribute" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_class_def_with_ann_assign_subscript" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_annassign" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign[x = 1\nx += 2\n-3]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign[x = &quot;a&quot;\nx += &quot;b&quot;\n-ab]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign[class Custom:\n    def __init__(self, value):\n        self.value = value\n    def __iadd__(self, other):\n        self.value += other * 10\n        return self\n\nx = Custom(1)\nx += 2\nx.value\n-21]" time="0.052" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[+=-7]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[-=-3]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[*=-10]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[/=-2.5]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[//=-2]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[%=-1]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[**=-25]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[&amp;=-0]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[|=-7]" time="0.042" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[^=-7]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[&gt;&gt;=-1]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_number[&lt;&lt;=-20]" time="0.042" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[+=-7]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[-=-3]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[*=-10]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[/=-2.5]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[//=-2]" time="0.056" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[%=-1]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[**=-25]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[&amp;=-0]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[|=-7]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[^=-7]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[&gt;&gt;=-1]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_augassign_custom[&lt;&lt;=-20]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_delete[x = 5\ndel x\nx\n-The variable `x` is not defined]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_delete[x = [1, 2, 3]\ndel x[2]\nx[2]\n-IndexError: list index out of range]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_delete[x = {&quot;key&quot;: &quot;value&quot;}\ndel x[&quot;key&quot;]\nx[&quot;key&quot;]\n-Could not index {} with 'key']" time="0.050" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_evaluate_delete[del x\n-Cannot delete name 'x': name is not defined]" time="0.041" /><testcase classname="tests.test_local_python_executor.TestEvaluatePythonCode" name="test_non_standard_comparisons" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_and[3-2-1]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_and[3-2-0]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_and[3-0-1]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_and[3-0-0]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_and[0-2-1]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_and[0-2-0]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_and[0-0-1]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_and[0-0-0]" time="0.052" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_or[3-2-1]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_or[3-2-0]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_or[3-0-1]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_or[3-0-0]" time="0.060" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_or[0-2-1]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_or[0-2-0]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_or[0-0-1]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateBoolop" name="test_evaluate_boolop_or[0-0-0]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateDelete" name="test_evaluate_delete[del x-state0-expectation0]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateDelete" name="test_evaluate_delete[del x[1]-state1-expectation1]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateDelete" name="test_evaluate_delete[del x['key']-state2-expectation2]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateDelete" name="test_evaluate_delete[del x-state3-expectation3]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a == b-state0-True]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a == b-state1-False]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a != b-state2-False]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a != b-state3-True]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &lt; b-state4-False]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &lt; b-state5-True]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &lt; b-state6-False]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &lt;= b-state7-True]" time="0.055" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &lt;= b-state8-True]" time="0.052" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &lt;= b-state9-False]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &gt; b-state10-False]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &gt; b-state11-False]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &gt; b-state12-True]" time="0.055" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &gt;= b-state13-True]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &gt;= b-state14-False]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a &gt;= b-state15-True]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a is b-state16-True]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a is b-state17-False]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a is not b-state18-False]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a is not b-state19-True]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a in b-state20-True]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a in b-state21-False]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a not in b-state22-False]" time="0.056" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a not in b-state23-True]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a == b == c-state24-True]" time="0.042" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a == b == c-state25-False]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a == b &lt; c-state26-False]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition[a == b &lt; c-state27-True]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a == b-state0-expected_result0]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a != b-state1-expected_result1]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a &lt; b-state2-expected_result2]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a &lt;= b-state3-expected_result3]" time="0.052" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a &gt; b-state4-expected_result4]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a &gt;= b-state5-expected_result5]" time="0.053" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a == b-state6-expected_result6]" time="0.053" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a != b-state7-expected_result7]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a &lt; b-state8-expected_result8]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a &lt;= b-state9-expected_result9]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a &gt; b-state10-expected_result10]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas[a &gt;= b-state11-expected_result11]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas_exceptions[a == b == c-state0-expected_exception0]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateCondition" name="test_evaluate_condition_with_pandas_exceptions[a == b == c-state1-expected_exception1]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[dct[1]-state0-11]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[dct[2]-state1-b]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[dct['b']-state2-2]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[dct['a']-state3-aa]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[dct[1, 2]-state4-3]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[dct['a']['b']-state5-1]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[lst[0]-state6-1]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[lst[-1]-state7-3]" time="0.054" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[lst[1:3]-state8-expected_result8]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[lst[:]-state9-expected_result9]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[lst[::2]-state10-expected_result10]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[lst[::-1]-state11-expected_result11]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[tup[1]-state12-2]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[tup[-1]-state13-3]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[tup[1:3]-state14-expected_result14]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[tup[:]-state15-expected_result15]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[tup[::2]-state16-expected_result16]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[tup[::-1]-state17-expected_result17]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[st[1]-state18-b]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[st[-1]-state19-c]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[st[1:3]-state20-bc]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[st[:]-state21-abc]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[st[::2]-state22-ac]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[st[::-1]-state23-cba]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[arr[1]-state24-2]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[arr[1:3]-state25-expected_result25]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[arr[:]-state26-expected_result26]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[arr[::2]-state27-expected_result27]" time="0.058" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[arr[::-1]-state28-expected_result28]" time="0.054" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[arr[1, 2]-state29-6]" time="0.042" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser[1]-state30-2]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser.loc[1]-state31-2]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser.loc[1]-state32-3]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser.iloc[1]-state33-2]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser.iloc[1]-state34-2]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser.at[1]-state35-2]" time="0.041" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser.at[1]-state36-3]" time="0.041" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser.iat[1]-state37-2]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser.iat[1]-state38-2]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser[1:3]-state39-expected_result39]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser[:]-state40-expected_result40]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser[::2]-state41-expected_result41]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[ser[::-1]-state42-expected_result42]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[df['y'][1]-state43-4]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[df['y'][5]-state44-3]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[df.loc[1, 'y']-state45-4]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[df.loc[5, 'y']-state46-3]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[df.iloc[1, 1]-state47-4]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[df.iloc[1, 1]-state48-4]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[df.at[1, 'y']-state49-4]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[df.at[5, 'y']-state50-3]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[df.iat[1, 1]-state51-4]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript[df.iat[1, 1]-state52-4]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript_error[dct['a']-state0-KeyError: 'a']" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript_error[dct[0]-state1-KeyError: 0]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript_error[dct['c']-state2-KeyError: 'c']" time="0.047" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript_error[dct[1, 2, 3]-state3-KeyError: (1, 2, 3)]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript_error[lst[0]-state4-IndexError: list index out of range]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript_error[lst[3]-state5-IndexError: list index out of range]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript_error[lst[-4]-state6-IndexError: list index out of range]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript_error[value[0]-state7-TypeError: 'int' object is not subscriptable]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript_with_custom_class[True-20]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestEvaluateSubscript" name="test_evaluate_subscript_with_custom_class[False-expectation1]" time="0.047" /><testcase classname="tests.test_local_python_executor" name="test_get_safe_module_handle_lazy_imports" time="0.050" /><testcase classname="tests.test_local_python_executor.TestPrintContainer" name="test_initial_value" time="0.043" /><testcase classname="tests.test_local_python_executor.TestPrintContainer" name="test_append" time="0.041" /><testcase classname="tests.test_local_python_executor.TestPrintContainer" name="test_iadd" time="0.042" /><testcase classname="tests.test_local_python_executor.TestPrintContainer" name="test_str" time="0.041" /><testcase classname="tests.test_local_python_executor.TestPrintContainer" name="test_repr" time="0.041" /><testcase classname="tests.test_local_python_executor.TestPrintContainer" name="test_len" time="0.045" /><testcase classname="tests.test_local_python_executor" name="test_fix_final_answer_code" time="0.052" /><testcase classname="tests.test_local_python_executor" name="test_check_import_authorized[os-authorized_imports0-True]" time="0.052" /><testcase classname="tests.test_local_python_executor" name="test_check_import_authorized[AnyModule-authorized_imports1-True]" time="0.047" /><testcase classname="tests.test_local_python_executor" name="test_check_import_authorized[os-authorized_imports2-True]" time="0.057" /><testcase classname="tests.test_local_python_executor" name="test_check_import_authorized[AnyModule-authorized_imports3-True]" time="0.053" /><testcase classname="tests.test_local_python_executor" name="test_check_import_authorized[Module.os-authorized_imports4-False]" time="0.051" /><testcase classname="tests.test_local_python_executor" name="test_check_import_authorized[Module.os-authorized_imports5-True]" time="0.053" /><testcase classname="tests.test_local_python_executor" name="test_check_import_authorized[os.path-authorized_imports6-True]" time="0.049" /><testcase classname="tests.test_local_python_executor" name="test_check_import_authorized[os-authorized_imports7-True]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_additional_authorized_imports_are_installed[additional_authorized_imports0-None]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_additional_authorized_imports_are_installed[additional_authorized_imports1-None]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_additional_authorized_imports_are_installed[additional_authorized_imports2-None]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_additional_authorized_imports_are_installed[additional_authorized_imports3-None]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_additional_authorized_imports_are_installed[additional_authorized_imports4-None]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_additional_authorized_imports_are_installed[additional_authorized_imports5-True]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_additional_authorized_imports_are_installed[additional_authorized_imports6-True]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_additional_authorized_imports_are_installed[additional_authorized_imports7-True]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_state_name" time="0.042" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_call_from_dict[d = {'func': lambda x: x + 10}; func = d['func']; func(1)]" time="0.042" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_call_from_dict[d = {'func': lambda x: x + 10}; d['func'](1)]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a = b = 1; a]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a = b = 1; b]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a, b = c, d = 1, 1; a]" time="0.057" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a, b = c, d = 1, 1; b]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a, b = c, d = 1, 1; c]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a, b = c, d = {1, 2}; a]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a, b = c, d = {1, 2}; c]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a, b = c, d = {1: 10, 2: 20}; a]" time="0.054" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a, b = c, d = {1: 10, 2: 20}; c]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a = b = (lambda: 1)(); b]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a = b = (lambda: 1)(); lambda x: 10; b]" time="0.042" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a = b = (lambda x: lambda y: x + y)(0)(1); b]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[\ndef foo():\n    return 1;\na = b = foo(); b]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[\ndef foo(*args, **kwargs):\n    return sum(args)\na = b = foo(1,-1,1); b]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_chained_assignments[a, b = 1, 2; a, b = b, a; b]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_evaluate_assign_error" time="0.045" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_function_def_recovers_source_code" time="0.043" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_isinstance_builtin_type[isinstance(5, int)-True]" time="0.042" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_isinstance_builtin_type[isinstance('foo', str)-True]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutor" name="test_isinstance_builtin_type[isinstance(5, str)-False]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_import[additional_authorized_imports0-expected_error0]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_import[additional_authorized_imports1-None]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins[additional_authorized_imports0-expected_error0]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins[additional_authorized_imports1-None]" time="0.041" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_safe_functions[additional_authorized_imports0-expected_error0]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_safe_functions[additional_authorized_imports1-None]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_dangerous_functions[additional_authorized_imports0-additional_tools0-expected_error0]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_dangerous_functions[additional_authorized_imports1-additional_tools1-expected_error1]" time="0.060" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_dangerous_functions[additional_authorized_imports2-additional_tools2-None]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_dangerous_functions[additional_authorized_imports0-additional_tools0-expected_error0]" time="0.041" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_dangerous_functions[additional_authorized_imports1-additional_tools1-expected_error1]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_dangerous_functions[additional_authorized_imports2-additional_tools2-None]" time="0.041" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_for_all_dangerous_functions[builtins.compile]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_for_all_dangerous_functions[builtins.eval]" time="0.053" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_for_all_dangerous_functions[builtins.exec]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_for_all_dangerous_functions[builtins.globals]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_for_all_dangerous_functions[builtins.locals]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_for_all_dangerous_functions[builtins.__import__]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_for_all_dangerous_functions[os.popen]" time="0.052" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_for_all_dangerous_functions[os.system]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_for_all_dangerous_functions[posix.system]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys[additional_authorized_imports0-expected_error0]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys[additional_authorized_imports1-expected_error1]" time="0.052" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys[additional_authorized_imports2-None]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys_for_all_dangerous_modules[builtins]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys_for_all_dangerous_modules[io]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys_for_all_dangerous_modules[multiprocessing]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys_for_all_dangerous_modules[os]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys_for_all_dangerous_modules[pathlib]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys_for_all_dangerous_modules[pty]" time="0.042"><skipped type="pytest.skip" message="module not present in sys.modules">/home/ecca/GitFiles/dec_smolagents/tests/test_local_python_executor.py:2031: module not present in sys.modules</skipped></testcase><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys_for_all_dangerous_modules[shutil]" time="0.042" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys_for_all_dangerous_modules[socket]" time="0.041" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys_for_all_dangerous_modules[subprocess]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_sys_for_all_dangerous_modules[sys]" time="0.046"><skipped type="pytest.skip" message="module not present in sys.modules">/home/ecca/GitFiles/dec_smolagents/tests/test_local_python_executor.py:2031: module not present in sys.modules</skipped></testcase><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_importlib[additional_authorized_imports0-expected_error0]" time="0.060" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_importlib[additional_authorized_imports1-None]" time="0.058" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import queue; queue.threading._os.system(':')-additional_authorized_imports0-expected_error0]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import queue; queue.threading._os.system(':')-additional_authorized_imports1-expected_error1]" time="0.057" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import random; random._os.system(':')-additional_authorized_imports2-expected_error2]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import random; random.__dict__['_os'].system(':')-additional_authorized_imports3-expected_error3]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import doctest; doctest.inspect.os.system(':')-additional_authorized_imports4-expected_error4]" time="0.058" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import doctest; doctest.inspect.os.system(':')-additional_authorized_imports5-expected_error5]" time="0.059" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import asyncio; asyncio.base_events.events.subprocess-additional_authorized_imports6-expected_error6]" time="0.056" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import asyncio; asyncio.base_events.events.subprocess-additional_authorized_imports7-expected_error7]" time="0.059" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import asyncio; asyncio.base_events.events.subprocess-additional_authorized_imports8-expected_error8]" time="0.059" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import queue; queue.threading._sys.modules['os'].system(':')-additional_authorized_imports9-expected_error9]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import queue; queue.threading._sys.modules['os'].system(':')-additional_authorized_imports10-expected_error10]" time="0.052" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import warnings; warnings.sys-additional_authorized_imports11-expected_error11]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules[import pandas; pandas.io-additional_authorized_imports12-None]" time="0.072" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules_through_indirect_attribute_access[\nimport functools\nimport warnings\nlist(filter(functools.partial(getattr, warnings), [&quot;sys&quot;]))\n-additional_authorized_imports0-expected_error0]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules_through_indirect_attribute_access[\nimport warnings\nlist(map(getattr, [warnings], [&quot;sys&quot;]))\n-additional_authorized_imports1-expected_error1]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_submodules_through_indirect_attribute_access[\nimport functools\nimport warnings\nlist(map(functools.partial(getattr, warnings), [&quot;sys&quot;]))\n-additional_authorized_imports2-expected_error2]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_sys[additional_authorized_imports0-additional_tools0-expected_error0]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_sys[additional_authorized_imports1-additional_tools1-expected_error1]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_sys[additional_authorized_imports2-additional_tools2-expected_error2]" time="0.052" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_sys[additional_authorized_imports3-additional_tools3-expected_error3]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_sys[additional_authorized_imports4-additional_tools4-None]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_traceback[additional_authorized_imports0-additional_tools0-expected_error0-False]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_traceback[additional_authorized_imports0-additional_tools0-expected_error0-True]" time="0.043" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_traceback[additional_authorized_imports1-additional_tools1-expected_error1-False]" time="0.041" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_traceback[additional_authorized_imports1-additional_tools1-expected_error1-True]" time="0.047" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_class_catch_warnings[additional_authorized_imports0-additional_tools0-expected_error0-False]" time="0.057" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_class_catch_warnings[additional_authorized_imports0-additional_tools0-expected_error0-True]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_class_catch_warnings[additional_authorized_imports1-additional_tools1-expected_error1-False]" time="0.050" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_class_catch_warnings[additional_authorized_imports1-additional_tools1-expected_error1-True]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_class_catch_warnings[additional_authorized_imports2-additional_tools2-expected_error2-False]" time="0.048" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_class_catch_warnings[additional_authorized_imports2-additional_tools2-expected_error2-True]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_class_catch_warnings[additional_authorized_imports3-additional_tools3-expected_error3-False]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_class_catch_warnings[additional_authorized_imports3-additional_tools3-expected_error3-True]" time="0.051" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_class_catch_warnings[additional_authorized_imports4-additional_tools4-expected_error4-False]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_builtins_via_class_catch_warnings[additional_authorized_imports4-additional_tools4-expected_error4-True]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_load_module_via_builtin_importer[additional_authorized_imports0-expected_error0]" time="0.045" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_load_module_via_builtin_importer[additional_authorized_imports1-expected_error1]" time="0.044" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_class_via_subclasses" time="0.044" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_dunder_access[a = (); b = a.__class__-__class__]" time="0.046" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_dunder_access[class A:\n    attr=1\nx = A()\nx_dict = x.__dict__-__dict__]" time="0.049" /><testcase classname="tests.test_local_python_executor.TestLocalPythonExecutorSecurity" name="test_vulnerability_via_dunder_indirect_access" time="0.044" /><testcase classname="tests.test_mcp_client" name="test_mcp_client_with_syntax" time="0.600" /><testcase classname="tests.test_mcp_client" name="test_mcp_client_try_finally_syntax" time="0.536" /><testcase classname="tests.test_mcp_client" name="test_multiple_servers" time="1.134" /><testcase classname="tests.test_memory.TestAgentMemory" name="test_initialization" time="0.047" /><testcase classname="tests.test_memory.TestAgentMemory" name="test_return_all_code_actions" time="0.047" /><testcase classname="tests.test_memory.TestMemoryStep" name="test_initialization" time="0.045" /><testcase classname="tests.test_memory.TestMemoryStep" name="test_dict" time="0.045" /><testcase classname="tests.test_memory.TestMemoryStep" name="test_to_messages" time="0.046" /><testcase classname="tests.test_memory" name="test_action_step_dict" time="0.046" /><testcase classname="tests.test_memory" name="test_action_step_to_messages" time="0.046" /><testcase classname="tests.test_memory" name="test_action_step_to_messages_no_tool_calls_with_observations" time="0.046" /><testcase classname="tests.test_memory" name="test_planning_step_to_messages" time="0.048" /><testcase classname="tests.test_memory" name="test_task_step_to_messages" time="0.047" /><testcase classname="tests.test_memory" name="test_system_prompt_step_to_messages" time="0.048" /><testcase classname="tests.test_models.TestModel" name="test_agglomerate_stream_deltas" time="0.053" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_stop_sequences[regular-model-stop_sequences0-True]" time="0.056" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_stop_sequences[openai/o3-stop_sequences1-False]" time="0.045" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_stop_sequences[openai/o4-mini-stop_sequences2-False]" time="0.045" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_stop_sequences[something/else/o3-stop_sequences3-False]" time="0.044" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_stop_sequences[something/else/o4-mini-stop_sequences4-False]" time="0.050" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_stop_sequences[o3-stop_sequences5-False]" time="0.047" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_stop_sequences[o4-mini-stop_sequences6-False]" time="0.047" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_stop_sequences[regular-model-None-False]" time="0.046" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_tool_choice[True-tool_choice0-expected_result0]" time="0.050" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_tool_choice[True-auto-expected_result1]" time="0.045" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_tool_choice[True-valid_tool_function-expected_result2]" time="0.042" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_tool_choice[True-tool_choice3-expected_result3]" time="0.050" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_tool_choice[True-None-expected_result4]" time="0.046" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_tool_choice[False-required-expected_result5]" time="0.046" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_tool_choice[False-auto-expected_result6]" time="0.048" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_tool_choice[False-None-expected_result7]" time="0.044" /><testcase classname="tests.test_models.TestModel" name="test_prepare_completion_kwargs_tool_choice[False-tool_choice8-expected_result8]" time="0.046" /><testcase classname="tests.test_models.TestModel" name="test_get_json_schema_has_nullable_args" time="0.056" /><testcase classname="tests.test_models.TestModel" name="test_chatmessage_has_model_dumps_json" time="0.048" /><testcase classname="tests.test_models.TestModel" name="test_get_mlx_message_no_tool" time="0.049"><skipped type="pytest.skip" message="requires macOS">/home/ecca/GitFiles/dec_smolagents/.venv/lib/python3.12/site-packages/_pytest/unittest.py:385: requires macOS</skipped></testcase><testcase classname="tests.test_models.TestModel" name="test_get_mlx_message_tricky_stop_sequence" time="0.049"><skipped type="pytest.skip" message="requires macOS">/home/ecca/GitFiles/dec_smolagents/.venv/lib/python3.12/site-packages/_pytest/unittest.py:385: requires macOS</skipped></testcase><testcase classname="tests.test_models.TestModel" name="test_transformers_message_no_tool" time="1.857" /><testcase classname="tests.test_models.TestModel" name="test_transformers_message_vl_no_tool" time="25.962" /><testcase classname="tests.test_models.TestModel" name="test_parse_json_if_needed" time="0.131" /><testcase classname="tests.test_models.TestInferenceClientModel" name="test_call_with_custom_role_conversions" time="0.107" /><testcase classname="tests.test_models.TestInferenceClientModel" name="test_init_model_with_tokens" time="0.106" /><testcase classname="tests.test_models.TestInferenceClientModel" name="test_structured_outputs_with_unsupported_provider" time="0.112" /><testcase classname="tests.test_models.TestInferenceClientModel" name="test_get_hfapi_message_no_tool" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_models.py:318: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_models.TestInferenceClientModel" name="test_get_hfapi_message_no_tool_external_provider" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_models.py:324: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_models.TestInferenceClientModel" name="test_get_hfapi_message_stream_no_tool" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_models.py:330: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_models.TestInferenceClientModel" name="test_get_hfapi_message_stream_no_tool_external_provider" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_models.py:337: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_models.TestLiteLLMModel" name="test_call_different_providers_without_key[groq/llama-3.3-70b]" time="0.358" /><testcase classname="tests.test_models.TestLiteLLMModel" name="test_call_different_providers_without_key[cerebras/llama-3.3-70b]" time="1.369" /><testcase classname="tests.test_models.TestLiteLLMModel" name="test_call_different_providers_without_key[mistral/mistral-tiny]" time="0.354" /><testcase classname="tests.test_models.TestLiteLLMModel" name="test_passing_flatten_messages" time="0.122" /><testcase classname="tests.test_models.TestLiteLLMRouterModel" name="test_flatten_messages_as_text[llama-3.3-70b-False]" time="0.147" /><testcase classname="tests.test_models.TestLiteLLMRouterModel" name="test_flatten_messages_as_text[llama-3.3-70b-True]" time="0.140" /><testcase classname="tests.test_models.TestLiteLLMRouterModel" name="test_flatten_messages_as_text[mistral-tiny-True]" time="0.146" /><testcase classname="tests.test_models.TestLiteLLMRouterModel" name="test_create_client" time="0.130" /><testcase classname="tests.test_models.TestOpenAIServerModel" name="test_client_kwargs_passed_correctly" time="0.147" /><testcase classname="tests.test_models.TestOpenAIServerModel" name="test_streaming_tool_calls" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_models.py:449: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_models.TestAmazonBedrockServerModel" name="test_client_for_bedrock" time="0.142" /><testcase classname="tests.test_models.TestAzureOpenAIServerModel" name="test_client_kwargs_passed_correctly" time="0.149" /><testcase classname="tests.test_models.TestTransformersModel" name="test_init[patching0]" time="0.141" /><testcase classname="tests.test_models.TestTransformersModel" name="test_init[patching1]" time="0.139" /><testcase classname="tests.test_models" name="test_get_clean_message_list_basic" time="0.112" /><testcase classname="tests.test_models" name="test_get_clean_message_list_with_dicts[messages0-expected_roles0-expected_texts0]" time="0.117" /><testcase classname="tests.test_models" name="test_get_clean_message_list_with_dicts[messages1-expected_roles1-expected_texts1]" time="0.115" /><testcase classname="tests.test_models" name="test_get_clean_message_list_role_conversions" time="0.160" /><testcase classname="tests.test_models" name="test_get_clean_message_list_image_encoding[False-expected_clean_message0]" time="0.134" /><testcase classname="tests.test_models" name="test_get_clean_message_list_image_encoding[True-expected_clean_message1]" time="0.147" /><testcase classname="tests.test_models" name="test_get_clean_message_list_flatten_messages_as_text" time="0.134" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[AzureOpenAIServerModel-model_kwargs0-patching0-False]" time="0.116" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[InferenceClientModel-model_kwargs1-patching1-False]" time="0.150" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[LiteLLMModel-model_kwargs2-None-False]" time="0.129" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[LiteLLMModel-model_kwargs3-None-True]" time="0.118" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[LiteLLMModel-model_kwargs4-None-True]" time="0.116" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[LiteLLMModel-model_kwargs5-None-True]" time="0.114" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[MLXModel-model_kwargs6-patching6-True]" time="0.195" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[OpenAIServerModel-model_kwargs7-patching7-False]" time="0.113" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[OpenAIServerModel-model_kwargs8-patching8-True]" time="0.112" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[TransformersModel-model_kwargs9-patching9-True]" time="0.112" /><testcase classname="tests.test_models" name="test_flatten_messages_as_text_for_all_models[TransformersModel-model_kwargs10-patching10-False]" time="0.140" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[o3-False]" time="0.122" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[o4-mini-False]" time="0.145" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[o3-2025-04-16-False]" time="0.140" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[o4-mini-2025-04-16-False]" time="0.122" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[openai/o3-False]" time="0.118" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[openai/o4-mini-False]" time="0.130" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[openai/o3-2025-04-16-False]" time="0.127" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[openai/o4-mini-2025-04-16-False]" time="0.121" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[o3-mini-True]" time="0.115" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[o3-mini-2025-01-31-True]" time="0.111" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[o4-True]" time="0.114" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[o4-turbo-True]" time="0.114" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[gpt-4-True]" time="0.115" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[claude-3-5-sonnet-True]" time="0.112" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[mistral-large-True]" time="0.120" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[openai/gpt-4-True]" time="0.122" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[anthropic/claude-3-5-sonnet-True]" time="0.122" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[mistralai/mistral-large-True]" time="0.122" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[-True]" time="0.113" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[o3x-True]" time="0.126" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[o3_mini-True]" time="0.125" /><testcase classname="tests.test_models" name="test_supports_stop_parameter[prefix-o3-True]" time="0.123" /><testcase classname="tests.test_models.TestGetToolCallFromText" name="test_get_tool_call_from_text_basic" time="0.129" /><testcase classname="tests.test_models.TestGetToolCallFromText" name="test_get_tool_call_from_text_name_key_missing" time="0.116" /><testcase classname="tests.test_models.TestGetToolCallFromText" name="test_get_tool_call_from_text_json_object_args" time="0.135" /><testcase classname="tests.test_models.TestGetToolCallFromText" name="test_get_tool_call_from_text_json_string_args" time="0.125" /><testcase classname="tests.test_models.TestGetToolCallFromText" name="test_get_tool_call_from_text_missing_args" time="0.141" /><testcase classname="tests.test_models.TestGetToolCallFromText" name="test_get_tool_call_from_text_custom_keys" time="0.117" /><testcase classname="tests.test_models.TestGetToolCallFromText" name="test_get_tool_call_from_text_numeric_args" time="0.136" /><testcase classname="tests.test_monitoring.MonitoringTester" name="test_code_agent_metrics" time="0.214"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;
source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_monitoring.MonitoringTester testMethod=test_code_agent_metrics&gt;

    def test_code_agent_metrics(self):
&gt;       agent = CodeAgent(
            tools=[],
            model=FakeLLMModel(),
            max_steps=1,
        )

tests/test_monitoring.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_monitoring.MonitoringTester" name="test_code_agent_metrics_generation_error" time="0.196"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;
source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_monitoring.MonitoringTester testMethod=test_code_agent_metrics_generation_error&gt;

    def test_code_agent_metrics_generation_error(self):
        class FakeLLMModelGenerationException(Model):
            def generate(self, prompt, **kwargs):
                raise Exception("Cannot generate")
    
&gt;       agent = CodeAgent(
            tools=[],
            model=FakeLLMModelGenerationException(),
            max_steps=1,
        )

tests/test_monitoring.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_monitoring.MonitoringTester" name="test_code_agent_metrics_max_steps" time="0.218"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;
source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_monitoring.MonitoringTester testMethod=test_code_agent_metrics_max_steps&gt;

    def test_code_agent_metrics_max_steps(self):
        class FakeLLMModelMalformedAnswer(Model):
            def generate(self, prompt, **kwargs):
                return ChatMessage(
                    role=MessageRole.ASSISTANT,
                    content="Malformed answer",
                    token_usage=TokenUsage(input_tokens=10, output_tokens=20),
                )
    
&gt;       agent = CodeAgent(
            tools=[],
            model=FakeLLMModelMalformedAnswer(),
            max_steps=1,
        )

tests/test_monitoring.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_monitoring.MonitoringTester" name="test_run_result_no_token_usage" time="0.176"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;
source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_monitoring.MonitoringTester testMethod=test_run_result_no_token_usage&gt;

    def test_run_result_no_token_usage(self):
&gt;       agent = CodeAgent(
            tools=[],
            model=FakeLLMModel(give_token_usage=False),
            max_steps=1,
            return_full_result=True,
        )

tests/test_monitoring.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_monitoring.MonitoringTester" name="test_run_return_full_result" time="0.227"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;
source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_monitoring.MonitoringTester testMethod=test_run_return_full_result&gt;

    def test_run_return_full_result(self):
&gt;       agent = CodeAgent(
            tools=[],
            model=FakeLLMModel(),
            max_steps=1,
            return_full_result=True,
        )

tests/test_monitoring.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_monitoring.MonitoringTester" name="test_streaming_agent_image_output" time="0.184"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe936392510&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;
source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_monitoring.MonitoringTester testMethod=test_streaming_agent_image_output&gt;

    def test_streaming_agent_image_output(self):
&gt;       agent = ToolCallingAgent(
            tools=[],
            model=FakeLLMModel(),
            max_steps=1,
            verbosity_level=100,
        )

tests/test_monitoring.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe936392510&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_monitoring.MonitoringTester" name="test_streaming_agent_text_output" time="0.218"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;
source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_monitoring.MonitoringTester testMethod=test_streaming_agent_text_output&gt;

    def test_streaming_agent_text_output(self):
&gt;       agent = CodeAgent(
            tools=[],
            model=FakeLLMModel(),
            max_steps=1,
            planning_interval=2,
        )

tests/test_monitoring.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_monitoring.MonitoringTester" name="test_streaming_with_agent_error" time="0.189"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;
source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_monitoring.MonitoringTester testMethod=test_streaming_with_agent_error&gt;

    def test_streaming_with_agent_error(self):
        class DummyModel(Model):
            def generate(self, prompt, **kwargs):
                return ChatMessage(role=MessageRole.ASSISTANT, content="Malformed call")
    
&gt;       agent = CodeAgent(
            tools=[],
            model=DummyModel(),
            max_steps=1,
        )

tests/test_monitoring.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/smolagents/agents.py:1690: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1768: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

template = 'You are an expert assistant who can solve any task using code blobs. You will be given a task to solve as best you ca...messages()`. If a task is provided or received, solve it using tools or code, and use `final_answer()` for the result.'
variables = {'authorized_imports': "['collections', 'datetime', 'itertools', 'math', 'queue', 'random', 're', 'stat', 'statistics'...codedata']", 'code_block_closing_tag': '&lt;/code&gt;', 'code_block_opening_tag': '&lt;code&gt;', 'custom_instructions': None, ...}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_monitoring.MonitoringTester" name="test_toolcalling_agent_metrics" time="0.150"><failure message="Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined">template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9c5f75910&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
&gt;           return compiled_template.render(**variables)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/smolagents/agents.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.12/site-packages/jinja2/environment.py:1295: in render
    self.environment.handle_exception()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x7fe9c62e2030&gt;
source = None

    def handle_exception(self, source: t.Optional[str] = None) -&gt; "te.NoReturn":
        """Exception handling helper.  This is used internally to either raise
        rewritten exceptions or return a rendered traceback for the template.
        """
        from .debug import rewrite_traceback_stack
    
&gt;       raise rewrite_traceback_stack(source=source)
E       jinja2.exceptions.UndefinedError: 'agent_id' is undefined

.venv/lib/python3.12/site-packages/jinja2/environment.py:942: UndefinedError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_monitoring.MonitoringTester testMethod=test_toolcalling_agent_metrics&gt;

    def test_toolcalling_agent_metrics(self):
&gt;       agent = ToolCallingAgent(
            tools=[],
            model=FakeLLMModel(),
            max_steps=1,
        )

tests/test_monitoring.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/smolagents/agents.py:1355: in __init__
    super().__init__(
&lt;string&gt;:3: in __init__
    ???
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.local/share/uv/python/cpython-3.12.11-linux-x86_64-gnu/lib/python3.12/unittest/mock.py:1204: in _execute_mock_call
    result = effect(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^
tests/conftest.py:34: in init_with_suppressed_logging
    original_multi_step_agent_init(
src/smolagents/agents.py:342: in __init__
    self.memory = AgentMemory(self.system_prompt)
                              ^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:412: in system_prompt
    return self.initialize_system_prompt()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/smolagents/agents.py:1430: in initialize_system_prompt
    system_prompt = populate_template(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

template = 'You are Agent {{agent_id}}, an expert assistant who solves tasks using tool calls and communicates with other agents ...ded or received, solve it using tools or by sending messages to other agents, and use `final_answer()` for the result.'
variables = {'custom_instructions': None, 'managed_agents': {}, 'tools': {'final_answer': &lt;smolagents.default_tools.FinalAnswerTool object at 0x7fe9c5f75910&gt;}}

    def populate_template(template: str, variables: dict[str, Any]) -&gt; str:
        compiled_template = Template(template, undefined=StrictUndefined)
        try:
            return compiled_template.render(**variables)
        except Exception as e:
&gt;           raise Exception(f"Error during jinja template rendering: {type(e).__name__}: {e}")
E           Exception: Error during jinja template rendering: UndefinedError: 'agent_id' is undefined

src/smolagents/agents.py:121: Exception</failure></testcase><testcase classname="tests.test_remote_executors.TestRemotePythonExecutor" name="test_send_tools_empty_tools" time="0.111" /><testcase classname="tests.test_remote_executors.TestRemotePythonExecutor" name="test_send_tools_with_default_wikipedia_search_tool" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:27: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestE2BExecutorUnit" name="test_e2b_executor_instantiation" time="0.232" /><testcase classname="tests.test_remote_executors.TestE2BExecutorUnit" name="test_cleanup" time="0.109" /><testcase classname="tests.test_remote_executors.TestE2BExecutorIntegration" name="test_final_answer_patterns[\nfinal_answer(&quot;&quot;&quot;This is\na multiline\nfinal answer&quot;&quot;&quot;)\n-This is\na multiline\nfinal answer]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:91: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestE2BExecutorIntegration" name="test_final_answer_patterns[\ntext = '''Text containing\nfinal_answer(5)\n'''\nfinal_answer(text)\n-Text containing\nfinal_answer(5)\n]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:91: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestE2BExecutorIntegration" name="test_final_answer_patterns[\nnum = 2\nif num == 1:\n    final_answer(&quot;One&quot;)\nelif num == 2:\n    final_answer(&quot;Two&quot;)\n-Two]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:91: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestE2BExecutorIntegration" name="test_custom_final_answer" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:129: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestE2BExecutorIntegration" name="test_custom_final_answer_with_custom_inputs" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:142: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorUnit" name="test_cleanup" time="0.106" /><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_initialization" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:211: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_state_persistence" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:215: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_execute_output" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:224: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_execute_multiline_output" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:231: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_execute_image_output" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:238: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_syntax_error_handling" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:251: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_cleanup_on_deletion" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:258: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_final_answer_patterns[\nfinal_answer(&quot;&quot;&quot;This is\na multiline\nfinal answer&quot;&quot;&quot;)\n-This is\na multiline\nfinal answer]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:267: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_final_answer_patterns[\ntext = '''Text containing\nfinal_answer(5)\n'''\nfinal_answer(text)\n-Text containing\nfinal_answer(5)\n]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:267: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_final_answer_patterns[\nnum = 2\nif num == 1:\n    final_answer(&quot;One&quot;)\nelif num == 2:\n    final_answer(&quot;Two&quot;)\n-Two]" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:267: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_custom_final_answer" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:305: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestDockerExecutorIntegration" name="test_custom_final_answer_with_custom_inputs" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:318: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestWasmExecutorUnit" name="test_wasm_executor_instantiation" time="0.099" /><testcase classname="tests.test_remote_executors.TestWasmExecutorIntegration" name="test_basic_execution" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:413: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestWasmExecutorIntegration" name="test_state_persistence" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:419: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestWasmExecutorIntegration" name="test_final_answer" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:428: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestWasmExecutorIntegration" name="test_numpy_execution" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:436: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestWasmExecutorIntegration" name="test_error_handling" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:446: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_remote_executors.TestWasmExecutorIntegration" name="test_syntax_error_handling" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_remote_executors.py:453: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_search.TestDuckDuckGoSearchTool" name="test_inputs_output" time="0.106" /><testcase classname="tests.test_search.TestDuckDuckGoSearchTool" name="test_common_attributes" time="0.091" /><testcase classname="tests.test_search.TestDuckDuckGoSearchTool" name="test_exact_match_arg" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/smolagents/tests/test_search.py:28: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_search.TestDuckDuckGoSearchTool" name="test_agent_type_output" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/smolagents/tests/test_search.py:33: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_with_default_tools[DuckDuckGoSearchTool]" time="0.098" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_with_default_tools[GoogleSearchTool]" time="0.103" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_with_default_tools[SpeechToTextTool]" time="0.104" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_with_default_tools[VisitWebpageTool]" time="0.104" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_with_default_tools[WebSearchTool]" time="0.108" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_valid[ValidTool]" time="0.104" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_valid[SimpleTool]" time="0.099" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_exceptions[InvalidToolName-Class attribute 'name' must be a valid Python identifier and not a reserved keyword, found 'invalid tool name']" time="0.091" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_exceptions[InvalidToolComplexAttrs-Complex attributes should be defined in __init__, not as class attributes]" time="0.098" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_exceptions[InvalidToolRequiredParams-Parameters in __init__ must have default values, found required parameters]" time="0.099" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_exceptions[InvalidToolNonLiteralDefaultParam-Parameters in __init__ must have literal default values, found non-literal defaults]" time="0.101" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_exceptions[InvalidToolUndefinedNames-Name 'UNDEFINED_VARIABLE' is undefined]" time="0.101" /><testcase classname="tests.test_tool_validation" name="test_validate_tool_attributes_multiple_assignments" time="0.094" /><testcase classname="tests.test_tool_validation" name="test_tool_to_dict_validation_with_multiple_assignments[tool_instance0]" time="0.099" /><testcase classname="tests.test_tool_validation" name="test_tool_to_dict_validation_with_multiple_assignments[tool_instance1]" time="0.091" /><testcase classname="tests.test_tool_validation.TestMethodChecker" name="test_multiple_assignments" time="0.095" /><testcase classname="tests.test_tools.TestTool" name="test_tool_input_type_validation[string-False-None]" time="0.100" /><testcase classname="tests.test_tools.TestTool" name="test_tool_input_type_validation[type_value1-False-None]" time="0.092" /><testcase classname="tests.test_tools.TestTool" name="test_tool_input_type_validation[invalid_type-ValueError-must be one of]" time="0.088" /><testcase classname="tests.test_tools.TestTool" name="test_tool_input_type_validation[type_value3-ValueError-must be one of]" time="0.095" /><testcase classname="tests.test_tools.TestTool" name="test_tool_input_type_validation[type_value4-TypeError-when type is a list, all elements must be strings]" time="0.087" /><testcase classname="tests.test_tools.TestTool" name="test_tool_input_type_validation[123-TypeError-must be a string or list of strings]" time="0.095" /><testcase classname="tests.test_tools.TestTool" name="test_tool_init_with_decorator" time="0.100" /><testcase classname="tests.test_tools.TestTool" name="test_tool_init_vanilla" time="0.097" /><testcase classname="tests.test_tools.TestTool" name="test_tool_init_decorator_raises_issues" time="0.094" /><testcase classname="tests.test_tools.TestTool" name="test_saving_tool_raises_error_imports_outside_function" time="0.104" /><testcase classname="tests.test_tools.TestTool" name="test_tool_definition_raises_no_error_imports_in_function" time="0.086" /><testcase classname="tests.test_tools.TestTool" name="test_tool_to_dict_allows_no_arg_in_init" time="0.109" /><testcase classname="tests.test_tools.TestTool" name="test_saving_tool_allows_no_imports_from_outside_methods" time="0.130" /><testcase classname="tests.test_tools.TestTool" name="test_tool_missing_class_attributes_raises_error" time="0.091" /><testcase classname="tests.test_tools.TestTool" name="test_tool_from_decorator_optional_args" time="0.090" /><testcase classname="tests.test_tools.TestTool" name="test_tool_mismatching_nullable_args_raises_error" time="0.095" /><testcase classname="tests.test_tools.TestTool" name="test_tool_default_parameters_is_nullable" time="0.099" /><testcase classname="tests.test_tools.TestTool" name="test_tool_supports_any_none" time="0.102" /><testcase classname="tests.test_tools.TestTool" name="test_tool_supports_array" time="0.095" /><testcase classname="tests.test_tools.TestTool" name="test_tool_supports_string_literal" time="0.095" /><testcase classname="tests.test_tools.TestTool" name="test_tool_supports_numeric_literal" time="0.099" /><testcase classname="tests.test_tools.TestTool" name="test_tool_supports_nullable_literal" time="0.086" /><testcase classname="tests.test_tools.TestTool" name="test_saving_tool_produces_valid_pyhon_code_with_multiline_description" time="0.094" /><testcase classname="tests.test_tools.TestTool" name="test_to_dict_boolean_default_input[boolean_default_tool_class]" time="0.098" /><testcase classname="tests.test_tools.TestTool" name="test_to_dict_boolean_default_input[boolean_default_tool_function]" time="0.095" /><testcase classname="tests.test_tools.TestTool" name="test_to_dict_optional_input[optional_input_tool_class]" time="0.095" /><testcase classname="tests.test_tools.TestTool" name="test_to_dict_optional_input[optional_input_tool_function]" time="0.093" /><testcase classname="tests.test_tools.TestTool" name="test_from_dict_roundtrip" time="0.095" /><testcase classname="tests.test_tools.TestTool" name="test_tool_from_dict_invalid" time="0.092" /><testcase classname="tests.test_tools.TestTool" name="test_tool_decorator_preserves_original_function" time="0.090" /><testcase classname="tests.test_tools.TestTool" name="test_tool_with_union_type_return" time="0.090" /><testcase classname="tests.test_tools.TestToolCollection" name="test_from_mcp" time="0.101" /><testcase classname="tests.test_tools.TestToolCollection" name="test_integration_from_mcp" time="0.000"><skipped type="pytest.skip" message="requires RUN_ALL environment variable">/home/ecca/GitFiles/dec_smolagents/tests/test_tools.py:636: requires RUN_ALL environment variable</skipped></testcase><testcase classname="tests.test_tools.TestToolCollection" name="test_integration_from_mcp_with_streamable_http" time="1.189" /><testcase classname="tests.test_tools.TestToolCollection" name="test_integration_from_mcp_with_sse" time="1.174" /><testcase classname="tests.test_tools" name="test_launch_gradio_demo_does_not_raise[boolean_default_tool_class]" time="0.320" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[bool-True-False]" time="0.114" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[str-b-False]" time="0.107" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[int-1-False]" time="0.098" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[list-expected_input3-False]" time="0.097" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[list-expected_input4-False]" time="0.095" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[dict-expected_input5-False]" time="0.095" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[dict-b-True]" time="0.096" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[bool-b-True]" time="0.098" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[tool_input_type8-a-False]" time="0.091" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[tool_input_type9-1-False]" time="0.087" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[tool_input_type10-None-True]" time="0.093" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments[tool_input_type11-True-True]" time="0.094" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[required_unsupported_none-str-default0-text-None]" time="0.102" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[required_unsupported_none-str-default1-None-Argument param has type 'null' but should be 'string'.]" time="0.102" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[required_unsupported_none-str-default2-input_value2-Argument param is required.]" time="0.098" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[required_supported_none-type_hint3-default3-text-None]" time="0.099" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[required_supported_none-type_hint4-default4-None-None]" time="0.100" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[required_supported_none-type_hint5-default5-input_value5-Argument param is required.]" time="0.000"><skipped type="pytest.skip" message="TODO: Fix this test case">/home/ecca/GitFiles/dec_smolagents/tests/test_tools.py:778: TODO: Fix this test case</skipped></testcase><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[optional_unsupported_none-str-default-text-None]" time="0.104" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[optional_unsupported_none-str-default-None-Argument param has type 'null' but should be 'string'.]" time="0.000"><skipped type="pytest.skip" message="TODO: Fix this test case">/home/ecca/GitFiles/dec_smolagents/tests/test_tools.py:778: TODO: Fix this test case</skipped></testcase><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[optional_unsupported_none-str-default-input_value8-None]" time="0.096" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[optional_supported_none_str_default-type_hint9-default-text-None]" time="0.089" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[optional_supported_none_str_default-type_hint10-default-None-None]" time="0.094" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[optional_supported_none_str_default-type_hint11-default-input_value11-None]" time="0.093" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[optional_supported_none_none_default-type_hint12-None-text-None]" time="0.093" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[optional_supported_none_none_default-type_hint13-None-None-None]" time="0.090" /><testcase classname="tests.test_tools" name="test_validate_tool_arguments_nullable[optional_supported_none_none_default-type_hint14-None-input_value14-None]" time="0.090" /><testcase classname="tests.test_types.AgentAudioTests" name="test_from_string" time="0.098" /><testcase classname="tests.test_types.AgentAudioTests" name="test_from_tensor" time="0.098" /><testcase classname="tests.test_types.TestAgentImage" name="test_from_tensor" time="0.093" /><testcase classname="tests.test_types.TestAgentImage" name="test_from_string" time="0.117" /><testcase classname="tests.test_types.TestAgentImage" name="test_from_image" time="0.156" /><testcase classname="tests.test_types.AgentTextTests" name="test_from_string" time="0.094" /><testcase classname="tests.test_utils.AgentTextTests" name="test_multiple_code_blobs" time="0.096" /><testcase classname="tests.test_utils.AgentTextTests" name="test_parse_code_blobs" time="0.088" /><testcase classname="tests.test_utils" name="test_get_source_ipython[test_func-def test_func():\n    return 42]" time="0.681" /><testcase classname="tests.test_utils" name="test_get_source_ipython[TestClass-class TestClass:\n    ...]" time="0.655" /><testcase classname="tests.test_utils" name="test_get_source_standard_class" time="0.100" /><testcase classname="tests.test_utils" name="test_get_source_standard_function" time="0.097" /><testcase classname="tests.test_utils" name="test_get_source_ipython_errors_empty_cells" time="0.649" /><testcase classname="tests.test_utils" name="test_get_source_ipython_errors_definition_not_found" time="0.678" /><testcase classname="tests.test_utils" name="test_get_source_ipython_errors_type_error" time="0.097" /><testcase classname="tests.test_utils" name="test_instance_to_source[tool0-from smolagents.tools import Tool\n\nclass ValidTool(Tool):\n    name = &quot;valid_tool&quot;\n    description = &quot;A valid tool&quot;\n    inputs = {'input': {'type': 'string', 'description': 'input'}}\n    output_type = &quot;string&quot;\n    simple_attr = &quot;string&quot;\n    dict_attr = {'key': 'value'}\n\n    def __init__(self, optional_param=&quot;default&quot;):\n        super().__init__()\n        self.param = optional_param\n\n    def forward(self, input: str) -&gt; str:\n        return input.upper()\n]" time="0.098" /><testcase classname="tests.test_utils" name="test_instance_to_source[tool1-from smolagents.tools import Tool\n\nclass SimpleTool(Tool):\n    name = &quot;valid_tool_function&quot;\n    description = &quot;A valid tool function.&quot;\n    inputs = {'input': {'type': 'string', 'description': 'Input string.'}}\n    output_type = &quot;string&quot;\n\n    def __init__(self):\n        self.is_initialized = True\n\n    def forward(self, input: str) -&gt; str:\n        &quot;&quot;&quot;A valid tool function.\n\n        Args:\n            input (str): Input string.\n        &quot;&quot;&quot;\n        return input.upper()\n]" time="0.098" /><testcase classname="tests.test_utils" name="test_e2e_class_tool_save" time="0.102" /><testcase classname="tests.test_utils" name="test_e2e_ipython_class_tool_save" time="0.104" /><testcase classname="tests.test_utils" name="test_e2e_function_tool_save" time="0.095" /><testcase classname="tests.test_utils" name="test_e2e_ipython_function_tool_save" time="0.092" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_valid_json[{}-expected_data0-]" time="0.094" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_valid_json[Text{}-expected_data1-Text]" time="0.097" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_valid_json[{&quot;simple&quot;: &quot;json&quot;}-expected_data2-]" time="0.097" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_valid_json[With text here{&quot;simple&quot;: &quot;json&quot;}-expected_data3-With text here]" time="0.093" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_valid_json[{&quot;simple&quot;: &quot;json&quot;}With text after-expected_data4-]" time="0.095" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_valid_json[With text before{&quot;simple&quot;: &quot;json&quot;}And text after-expected_data5-With text before]" time="0.093" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_invalid_json[simple&quot;: &quot;json&quot;}]" time="0.095" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_invalid_json[With text here&quot;simple&quot;: &quot;json&quot;}]" time="0.100" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_invalid_json[{&quot;simple&quot;: &quot;&quot;json&quot;}With text after]" time="0.091" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_invalid_json[{&quot;simple&quot;: &quot;json&quot;With text after]" time="0.097" /><testcase classname="tests.test_utils" name="test_parse_json_blob_with_invalid_json[}}]" time="0.091" /><testcase classname="tests.test_utils" name="test_is_valid_name[valid_name-True]" time="0.098" /><testcase classname="tests.test_utils" name="test_is_valid_name[ValidName-True]" time="0.095" /><testcase classname="tests.test_utils" name="test_is_valid_name[valid123-True]" time="0.094" /><testcase classname="tests.test_utils" name="test_is_valid_name[_private-True]" time="0.091" /><testcase classname="tests.test_utils" name="test_is_valid_name[-False]" time="0.087" /><testcase classname="tests.test_utils" name="test_is_valid_name[123invalid-False]" time="0.097" /><testcase classname="tests.test_utils" name="test_is_valid_name[invalid-name-False]" time="0.101" /><testcase classname="tests.test_utils" name="test_is_valid_name[invalid name-False]" time="0.101" /><testcase classname="tests.test_utils" name="test_is_valid_name[invalid.name-False]" time="0.108" /><testcase classname="tests.test_utils" name="test_is_valid_name[if-False]" time="0.097" /><testcase classname="tests.test_utils" name="test_is_valid_name[for-False]" time="0.092" /><testcase classname="tests.test_utils" name="test_is_valid_name[class-False]" time="0.097" /><testcase classname="tests.test_utils" name="test_is_valid_name[return-False]" time="0.094" /><testcase classname="tests.test_utils" name="test_is_valid_name[123-False]" time="0.090" /><testcase classname="tests.test_utils" name="test_is_valid_name[None-False]" time="0.093" /><testcase classname="tests.test_utils" name="test_is_valid_name[name15-False]" time="0.094" /><testcase classname="tests.test_utils" name="test_is_valid_name[name16-False]" time="0.090" /></testsuite></testsuites>